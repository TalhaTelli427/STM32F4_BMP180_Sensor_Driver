
BMP180_446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000506c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005238  08005238  00015238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005288  08005288  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005288  08005288  00015288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005290  08005290  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005290  08005290  00015290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000070  08005308  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08005308  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b877  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f6  00000000  00000000  0002b917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002d210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002db88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212fa  00000000  00000000  0002e480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d05d  00000000  00000000  0004f77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca10d  00000000  00000000  0005c7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001268e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c44  00000000  00000000  00126934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800521c 	.word	0x0800521c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	0800521c 	.word	0x0800521c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_uldivmod>:
 8000c10:	b953      	cbnz	r3, 8000c28 <__aeabi_uldivmod+0x18>
 8000c12:	b94a      	cbnz	r2, 8000c28 <__aeabi_uldivmod+0x18>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bf08      	it	eq
 8000c18:	2800      	cmpeq	r0, #0
 8000c1a:	bf1c      	itt	ne
 8000c1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c20:	f04f 30ff 	movne.w	r0, #4294967295
 8000c24:	f000 b974 	b.w	8000f10 <__aeabi_idiv0>
 8000c28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c30:	f000 f806 	bl	8000c40 <__udivmoddi4>
 8000c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr

08000c40 <__udivmoddi4>:
 8000c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c44:	9d08      	ldr	r5, [sp, #32]
 8000c46:	4604      	mov	r4, r0
 8000c48:	468e      	mov	lr, r1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d14d      	bne.n	8000cea <__udivmoddi4+0xaa>
 8000c4e:	428a      	cmp	r2, r1
 8000c50:	4694      	mov	ip, r2
 8000c52:	d969      	bls.n	8000d28 <__udivmoddi4+0xe8>
 8000c54:	fab2 f282 	clz	r2, r2
 8000c58:	b152      	cbz	r2, 8000c70 <__udivmoddi4+0x30>
 8000c5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5e:	f1c2 0120 	rsb	r1, r2, #32
 8000c62:	fa20 f101 	lsr.w	r1, r0, r1
 8000c66:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c6a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c6e:	4094      	lsls	r4, r2
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	0c21      	lsrs	r1, r4, #16
 8000c76:	fbbe f6f8 	udiv	r6, lr, r8
 8000c7a:	fa1f f78c 	uxth.w	r7, ip
 8000c7e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c86:	fb06 f107 	mul.w	r1, r6, r7
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x64>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c96:	f080 811f 	bcs.w	8000ed8 <__udivmoddi4+0x298>
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	f240 811c 	bls.w	8000ed8 <__udivmoddi4+0x298>
 8000ca0:	3e02      	subs	r6, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1a5b      	subs	r3, r3, r1
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb4:	fb00 f707 	mul.w	r7, r0, r7
 8000cb8:	42a7      	cmp	r7, r4
 8000cba:	d90a      	bls.n	8000cd2 <__udivmoddi4+0x92>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc4:	f080 810a 	bcs.w	8000edc <__udivmoddi4+0x29c>
 8000cc8:	42a7      	cmp	r7, r4
 8000cca:	f240 8107 	bls.w	8000edc <__udivmoddi4+0x29c>
 8000cce:	4464      	add	r4, ip
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	1be4      	subs	r4, r4, r7
 8000cd8:	2600      	movs	r6, #0
 8000cda:	b11d      	cbz	r5, 8000ce4 <__udivmoddi4+0xa4>
 8000cdc:	40d4      	lsrs	r4, r2
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d909      	bls.n	8000d02 <__udivmoddi4+0xc2>
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	f000 80ef 	beq.w	8000ed2 <__udivmoddi4+0x292>
 8000cf4:	2600      	movs	r6, #0
 8000cf6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	fab3 f683 	clz	r6, r3
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d14a      	bne.n	8000da0 <__udivmoddi4+0x160>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xd4>
 8000d0e:	4282      	cmp	r2, r0
 8000d10:	f200 80f9 	bhi.w	8000f06 <__udivmoddi4+0x2c6>
 8000d14:	1a84      	subs	r4, r0, r2
 8000d16:	eb61 0303 	sbc.w	r3, r1, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	469e      	mov	lr, r3
 8000d1e:	2d00      	cmp	r5, #0
 8000d20:	d0e0      	beq.n	8000ce4 <__udivmoddi4+0xa4>
 8000d22:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d26:	e7dd      	b.n	8000ce4 <__udivmoddi4+0xa4>
 8000d28:	b902      	cbnz	r2, 8000d2c <__udivmoddi4+0xec>
 8000d2a:	deff      	udf	#255	; 0xff
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	2a00      	cmp	r2, #0
 8000d32:	f040 8092 	bne.w	8000e5a <__udivmoddi4+0x21a>
 8000d36:	eba1 010c 	sub.w	r1, r1, ip
 8000d3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3e:	fa1f fe8c 	uxth.w	lr, ip
 8000d42:	2601      	movs	r6, #1
 8000d44:	0c20      	lsrs	r0, r4, #16
 8000d46:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d4a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d4e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d52:	fb0e f003 	mul.w	r0, lr, r3
 8000d56:	4288      	cmp	r0, r1
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x12c>
 8000d5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x12a>
 8000d64:	4288      	cmp	r0, r1
 8000d66:	f200 80cb 	bhi.w	8000f00 <__udivmoddi4+0x2c0>
 8000d6a:	4643      	mov	r3, r8
 8000d6c:	1a09      	subs	r1, r1, r0
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d74:	fb07 1110 	mls	r1, r7, r0, r1
 8000d78:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x156>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x154>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f200 80bb 	bhi.w	8000f0a <__udivmoddi4+0x2ca>
 8000d94:	4608      	mov	r0, r1
 8000d96:	eba4 040e 	sub.w	r4, r4, lr
 8000d9a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d9e:	e79c      	b.n	8000cda <__udivmoddi4+0x9a>
 8000da0:	f1c6 0720 	rsb	r7, r6, #32
 8000da4:	40b3      	lsls	r3, r6
 8000da6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000daa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dae:	fa20 f407 	lsr.w	r4, r0, r7
 8000db2:	fa01 f306 	lsl.w	r3, r1, r6
 8000db6:	431c      	orrs	r4, r3
 8000db8:	40f9      	lsrs	r1, r7
 8000dba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dbe:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dc6:	0c20      	lsrs	r0, r4, #16
 8000dc8:	fa1f fe8c 	uxth.w	lr, ip
 8000dcc:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dd4:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd8:	4288      	cmp	r0, r1
 8000dda:	fa02 f206 	lsl.w	r2, r2, r6
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b8>
 8000de0:	eb1c 0101 	adds.w	r1, ip, r1
 8000de4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de8:	f080 8088 	bcs.w	8000efc <__udivmoddi4+0x2bc>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f240 8085 	bls.w	8000efc <__udivmoddi4+0x2bc>
 8000df2:	f1a8 0802 	sub.w	r8, r8, #2
 8000df6:	4461      	add	r1, ip
 8000df8:	1a09      	subs	r1, r1, r0
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e00:	fb09 1110 	mls	r1, r9, r0, r1
 8000e04:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e0c:	458e      	cmp	lr, r1
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1e2>
 8000e10:	eb1c 0101 	adds.w	r1, ip, r1
 8000e14:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e18:	d26c      	bcs.n	8000ef4 <__udivmoddi4+0x2b4>
 8000e1a:	458e      	cmp	lr, r1
 8000e1c:	d96a      	bls.n	8000ef4 <__udivmoddi4+0x2b4>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4461      	add	r1, ip
 8000e22:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e26:	fba0 9402 	umull	r9, r4, r0, r2
 8000e2a:	eba1 010e 	sub.w	r1, r1, lr
 8000e2e:	42a1      	cmp	r1, r4
 8000e30:	46c8      	mov	r8, r9
 8000e32:	46a6      	mov	lr, r4
 8000e34:	d356      	bcc.n	8000ee4 <__udivmoddi4+0x2a4>
 8000e36:	d053      	beq.n	8000ee0 <__udivmoddi4+0x2a0>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x212>
 8000e3a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e3e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e42:	fa01 f707 	lsl.w	r7, r1, r7
 8000e46:	fa22 f306 	lsr.w	r3, r2, r6
 8000e4a:	40f1      	lsrs	r1, r6
 8000e4c:	431f      	orrs	r7, r3
 8000e4e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	f1c2 0320 	rsb	r3, r2, #32
 8000e5e:	40d8      	lsrs	r0, r3
 8000e60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e64:	fa21 f303 	lsr.w	r3, r1, r3
 8000e68:	4091      	lsls	r1, r2
 8000e6a:	4301      	orrs	r1, r0
 8000e6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e78:	fb07 3610 	mls	r6, r7, r0, r3
 8000e7c:	0c0b      	lsrs	r3, r1, #16
 8000e7e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e82:	fb00 f60e 	mul.w	r6, r0, lr
 8000e86:	429e      	cmp	r6, r3
 8000e88:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x260>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e96:	d22f      	bcs.n	8000ef8 <__udivmoddi4+0x2b8>
 8000e98:	429e      	cmp	r6, r3
 8000e9a:	d92d      	bls.n	8000ef8 <__udivmoddi4+0x2b8>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	1b9b      	subs	r3, r3, r6
 8000ea2:	b289      	uxth	r1, r1
 8000ea4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea8:	fb07 3316 	mls	r3, r7, r6, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb06 f30e 	mul.w	r3, r6, lr
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x28a>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec0:	d216      	bcs.n	8000ef0 <__udivmoddi4+0x2b0>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d914      	bls.n	8000ef0 <__udivmoddi4+0x2b0>
 8000ec6:	3e02      	subs	r6, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	1ac9      	subs	r1, r1, r3
 8000ecc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed0:	e738      	b.n	8000d44 <__udivmoddi4+0x104>
 8000ed2:	462e      	mov	r6, r5
 8000ed4:	4628      	mov	r0, r5
 8000ed6:	e705      	b.n	8000ce4 <__udivmoddi4+0xa4>
 8000ed8:	4606      	mov	r6, r0
 8000eda:	e6e3      	b.n	8000ca4 <__udivmoddi4+0x64>
 8000edc:	4618      	mov	r0, r3
 8000ede:	e6f8      	b.n	8000cd2 <__udivmoddi4+0x92>
 8000ee0:	454b      	cmp	r3, r9
 8000ee2:	d2a9      	bcs.n	8000e38 <__udivmoddi4+0x1f8>
 8000ee4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eec:	3801      	subs	r0, #1
 8000eee:	e7a3      	b.n	8000e38 <__udivmoddi4+0x1f8>
 8000ef0:	4646      	mov	r6, r8
 8000ef2:	e7ea      	b.n	8000eca <__udivmoddi4+0x28a>
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	e794      	b.n	8000e22 <__udivmoddi4+0x1e2>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	e7d1      	b.n	8000ea0 <__udivmoddi4+0x260>
 8000efc:	46d0      	mov	r8, sl
 8000efe:	e77b      	b.n	8000df8 <__udivmoddi4+0x1b8>
 8000f00:	3b02      	subs	r3, #2
 8000f02:	4461      	add	r1, ip
 8000f04:	e732      	b.n	8000d6c <__udivmoddi4+0x12c>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e709      	b.n	8000d1e <__udivmoddi4+0xde>
 8000f0a:	4464      	add	r4, ip
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	e742      	b.n	8000d96 <__udivmoddi4+0x156>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <TT_BMP180_Init_Read_Cal_Data>:
long B5 = 0;
unsigned long B4 = 0;
long B6 = 0;
unsigned long B7 = 0;

void TT_BMP180_Init_Read_Cal_Data(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af04      	add	r7, sp, #16
	uint8_t calibDatas[CAL_VALUE_SIZE] = { 0 };
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	821a      	strh	r2, [r3, #16]

	HAL_I2C_Mem_Read(&hi2c1, BMP_180_READ_ADRESS, CAL_START_ADRESS, 1,
 8000f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f30:	9302      	str	r3, [sp, #8]
 8000f32:	2316      	movs	r3, #22
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	463b      	mov	r3, r7
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	22aa      	movs	r2, #170	; 0xaa
 8000f3e:	21ef      	movs	r1, #239	; 0xef
 8000f40:	4836      	ldr	r0, [pc, #216]	; (800101c <TT_BMP180_Init_Read_Cal_Data+0x108>)
 8000f42:	f001 fbf3 	bl	800272c <HAL_I2C_Mem_Read>
			calibDatas, CAL_VALUE_SIZE, 1000);
	AC1 = ((calibDatas[0] << 8) | calibDatas[1]);
 8000f46:	783b      	ldrb	r3, [r7, #0]
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	b21a      	sxth	r2, r3
 8000f4c:	787b      	ldrb	r3, [r7, #1]
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	4b32      	ldr	r3, [pc, #200]	; (8001020 <TT_BMP180_Init_Read_Cal_Data+0x10c>)
 8000f56:	801a      	strh	r2, [r3, #0]
	AC2 = ((calibDatas[2] << 8) | calibDatas[3]);
 8000f58:	78bb      	ldrb	r3, [r7, #2]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b21a      	sxth	r2, r3
 8000f66:	4b2f      	ldr	r3, [pc, #188]	; (8001024 <TT_BMP180_Init_Read_Cal_Data+0x110>)
 8000f68:	801a      	strh	r2, [r3, #0]
	AC3 = ((calibDatas[4] << 8) | calibDatas[5]);
 8000f6a:	793b      	ldrb	r3, [r7, #4]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	797b      	ldrb	r3, [r7, #5]
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <TT_BMP180_Init_Read_Cal_Data+0x114>)
 8000f7a:	801a      	strh	r2, [r3, #0]
	AC4 = ((calibDatas[6] << 8) | calibDatas[7]);
 8000f7c:	79bb      	ldrb	r3, [r7, #6]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	4b27      	ldr	r3, [pc, #156]	; (800102c <TT_BMP180_Init_Read_Cal_Data+0x118>)
 8000f8e:	801a      	strh	r2, [r3, #0]
	AC5 = ((calibDatas[8] << 8) | calibDatas[9]);
 8000f90:	7a3b      	ldrb	r3, [r7, #8]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	7a7b      	ldrb	r3, [r7, #9]
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <TT_BMP180_Init_Read_Cal_Data+0x11c>)
 8000fa2:	801a      	strh	r2, [r3, #0]
	AC6 = ((calibDatas[10] << 8) | calibDatas[11]);
 8000fa4:	7abb      	ldrb	r3, [r7, #10]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	7afb      	ldrb	r3, [r7, #11]
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <TT_BMP180_Init_Read_Cal_Data+0x120>)
 8000fb6:	801a      	strh	r2, [r3, #0]
	B1 = ((calibDatas[12] << 8) | calibDatas[13]);
 8000fb8:	7b3b      	ldrb	r3, [r7, #12]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	7b7b      	ldrb	r3, [r7, #13]
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <TT_BMP180_Init_Read_Cal_Data+0x124>)
 8000fc8:	801a      	strh	r2, [r3, #0]
	B2 = ((calibDatas[14] << 8) | calibDatas[15]);
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <TT_BMP180_Init_Read_Cal_Data+0x128>)
 8000fda:	801a      	strh	r2, [r3, #0]
	MB = ((calibDatas[16] << 8) | calibDatas[17]);
 8000fdc:	7c3b      	ldrb	r3, [r7, #16]
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	7c7b      	ldrb	r3, [r7, #17]
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <TT_BMP180_Init_Read_Cal_Data+0x12c>)
 8000fec:	801a      	strh	r2, [r3, #0]
	MC = ((calibDatas[18] << 8) | calibDatas[19]);
 8000fee:	7cbb      	ldrb	r3, [r7, #18]
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	7cfb      	ldrb	r3, [r7, #19]
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <TT_BMP180_Init_Read_Cal_Data+0x130>)
 8000ffe:	801a      	strh	r2, [r3, #0]
	MD = ((calibDatas[20] << 8) | calibDatas[21]);
 8001000:	7d3b      	ldrb	r3, [r7, #20]
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b21a      	sxth	r2, r3
 8001006:	7d7b      	ldrb	r3, [r7, #21]
 8001008:	b21b      	sxth	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <TT_BMP180_Init_Read_Cal_Data+0x134>)
 8001010:	801a      	strh	r2, [r3, #0]

}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000cc 	.word	0x200000cc
 8001020:	2000008c 	.word	0x2000008c
 8001024:	2000008e 	.word	0x2000008e
 8001028:	20000090 	.word	0x20000090
 800102c:	20000092 	.word	0x20000092
 8001030:	20000094 	.word	0x20000094
 8001034:	20000096 	.word	0x20000096
 8001038:	20000098 	.word	0x20000098
 800103c:	2000009a 	.word	0x2000009a
 8001040:	2000009c 	.word	0x2000009c
 8001044:	2000009e 	.word	0x2000009e
 8001048:	200000a0 	.word	0x200000a0

0800104c <TT_Get_Temp_Float>:

float TT_Get_Temp_Float(void) {
 800104c:	b5b0      	push	{r4, r5, r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af04      	add	r7, sp, #16
	uint8_t Temp_read[2] = { 0 };
 8001052:	2300      	movs	r3, #0
 8001054:	813b      	strh	r3, [r7, #8]
	uint8_t Temp_write_data[1];
	Temp_write_data[0] = 0x2E;
 8001056:	232e      	movs	r3, #46	; 0x2e
 8001058:	713b      	strb	r3, [r7, #4]
	float T;

	HAL_I2C_Mem_Write(&hi2c1, BMP_180_WRITE_ADRESS, TEMP_AND_PRES_WRITE_REG, 1,
 800105a:	f242 7310 	movw	r3, #10000	; 0x2710
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	2301      	movs	r3, #1
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	22f4      	movs	r2, #244	; 0xf4
 800106c:	21ee      	movs	r1, #238	; 0xee
 800106e:	4841      	ldr	r0, [pc, #260]	; (8001174 <TT_Get_Temp_Float+0x128>)
 8001070:	f001 fa62 	bl	8002538 <HAL_I2C_Mem_Write>
			Temp_write_data, 1, 10000);
	HAL_Delay(5);
 8001074:	2005      	movs	r0, #5
 8001076:	f000 fe63 	bl	8001d40 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_180_READ_ADRESS, READ_TEMP_AND_PRES_REG, 1,
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	9302      	str	r3, [sp, #8]
 8001080:	2302      	movs	r3, #2
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	22f6      	movs	r2, #246	; 0xf6
 800108e:	21ef      	movs	r1, #239	; 0xef
 8001090:	4838      	ldr	r0, [pc, #224]	; (8001174 <TT_Get_Temp_Float+0x128>)
 8001092:	f001 fb4b 	bl	800272c <HAL_I2C_Mem_Read>
			Temp_read, 2, 1000);
	UT = (Temp_read[0] << 8) | Temp_read[1];
 8001096:	7a3b      	ldrb	r3, [r7, #8]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	7a7a      	ldrb	r2, [r7, #9]
 800109c:	4313      	orrs	r3, r2
 800109e:	4a36      	ldr	r2, [pc, #216]	; (8001178 <TT_Get_Temp_Float+0x12c>)
 80010a0:	6013      	str	r3, [r2, #0]
	X1 = (UT - AC6) * AC5 / pow(2, 15);
 80010a2:	4b35      	ldr	r3, [pc, #212]	; (8001178 <TT_Get_Temp_Float+0x12c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a35      	ldr	r2, [pc, #212]	; (800117c <TT_Get_Temp_Float+0x130>)
 80010a8:	8812      	ldrh	r2, [r2, #0]
 80010aa:	1a9b      	subs	r3, r3, r2
 80010ac:	4a34      	ldr	r2, [pc, #208]	; (8001180 <TT_Get_Temp_Float+0x134>)
 80010ae:	8812      	ldrh	r2, [r2, #0]
 80010b0:	fb02 f303 	mul.w	r3, r2, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f9f9 	bl	80004ac <__aeabi_i2d>
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	4b31      	ldr	r3, [pc, #196]	; (8001184 <TT_Get_Temp_Float+0x138>)
 80010c0:	f7ff fb88 	bl	80007d4 <__aeabi_ddiv>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fd08 	bl	8000ae0 <__aeabi_d2iz>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a2d      	ldr	r2, [pc, #180]	; (8001188 <TT_Get_Temp_Float+0x13c>)
 80010d4:	6013      	str	r3, [r2, #0]
	X2 = MC * pow(2, 11) / (X1 + MD);
 80010d6:	4b2d      	ldr	r3, [pc, #180]	; (800118c <TT_Get_Temp_Float+0x140>)
 80010d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f9e5 	bl	80004ac <__aeabi_i2d>
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <TT_Get_Temp_Float+0x144>)
 80010e8:	f7ff fa4a 	bl	8000580 <__aeabi_dmul>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4614      	mov	r4, r2
 80010f2:	461d      	mov	r5, r3
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <TT_Get_Temp_Float+0x148>)
 80010f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <TT_Get_Temp_Float+0x13c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4413      	add	r3, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f9d2 	bl	80004ac <__aeabi_i2d>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4620      	mov	r0, r4
 800110e:	4629      	mov	r1, r5
 8001110:	f7ff fb60 	bl	80007d4 <__aeabi_ddiv>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	f7ff fce0 	bl	8000ae0 <__aeabi_d2iz>
 8001120:	4603      	mov	r3, r0
 8001122:	4a1d      	ldr	r2, [pc, #116]	; (8001198 <TT_Get_Temp_Float+0x14c>)
 8001124:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <TT_Get_Temp_Float+0x13c>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <TT_Get_Temp_Float+0x14c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a1a      	ldr	r2, [pc, #104]	; (800119c <TT_Get_Temp_Float+0x150>)
 8001132:	6013      	str	r3, [r2, #0]
	T = (B5 + 8) / pow(2, 4);
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <TT_Get_Temp_Float+0x150>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3308      	adds	r3, #8
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f9b6 	bl	80004ac <__aeabi_i2d>
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <TT_Get_Temp_Float+0x154>)
 8001146:	f7ff fb45 	bl	80007d4 <__aeabi_ddiv>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f7ff fd0d 	bl	8000b70 <__aeabi_d2f>
 8001156:	4603      	mov	r3, r0
 8001158:	60fb      	str	r3, [r7, #12]
	return T / 10.0;
 800115a:	edd7 7a03 	vldr	s15, [r7, #12]
 800115e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001162:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001166:	eef0 7a66 	vmov.f32	s15, s13
}
 800116a:	eeb0 0a67 	vmov.f32	s0, s15
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bdb0      	pop	{r4, r5, r7, pc}
 8001174:	200000cc 	.word	0x200000cc
 8001178:	200000a4 	.word	0x200000a4
 800117c:	20000096 	.word	0x20000096
 8001180:	20000094 	.word	0x20000094
 8001184:	40e00000 	.word	0x40e00000
 8001188:	200000ac 	.word	0x200000ac
 800118c:	2000009e 	.word	0x2000009e
 8001190:	40a00000 	.word	0x40a00000
 8001194:	200000a0 	.word	0x200000a0
 8001198:	200000b0 	.word	0x200000b0
 800119c:	200000bc 	.word	0x200000bc
 80011a0:	40300000 	.word	0x40300000

080011a4 <TT_Get_Temp_Int>:
int TT_Get_Temp_Int(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	return (int) (TT_Get_Temp_Float());
 80011a8:	f7ff ff50 	bl	800104c <TT_Get_Temp_Float>
 80011ac:	eef0 7a40 	vmov.f32	s15, s0
 80011b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b4:	ee17 3a90 	vmov	r3, s15
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	bd80      	pop	{r7, pc}

080011bc <TT_Get_Pressure>:

float TT_Get_Pressure(int oss) {
 80011bc:	b5b0      	push	{r4, r5, r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af04      	add	r7, sp, #16
 80011c2:	6078      	str	r0, [r7, #4]
	int Wait_time;
	float Press;
	uint8_t pressure_val[3] = { 0 };
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <TT_Get_Pressure+0x58>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	81bb      	strh	r3, [r7, #12]
 80011ca:	2300      	movs	r3, #0
 80011cc:	73bb      	strb	r3, [r7, #14]
	uint8_t pressure_write_data[1] = { 0 };
 80011ce:	2300      	movs	r3, #0
 80011d0:	723b      	strb	r3, [r7, #8]
	pressure_write_data[0] = 0x34 | (oss << 6);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	019b      	lsls	r3, r3, #6
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	f043 0334 	orr.w	r3, r3, #52	; 0x34
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	723b      	strb	r3, [r7, #8]
	switch (oss) {
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	d81a      	bhi.n	800121e <TT_Get_Pressure+0x62>
 80011e8:	a201      	add	r2, pc, #4	; (adr r2, 80011f0 <TT_Get_Pressure+0x34>)
 80011ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ee:	bf00      	nop
 80011f0:	08001201 	.word	0x08001201
 80011f4:	08001207 	.word	0x08001207
 80011f8:	0800120d 	.word	0x0800120d
 80011fc:	08001219 	.word	0x08001219
	case (0):
		Wait_time = 5;
 8001200:	2305      	movs	r3, #5
 8001202:	617b      	str	r3, [r7, #20]
		break;
 8001204:	e00b      	b.n	800121e <TT_Get_Pressure+0x62>
	case (1):
		Wait_time = 8;
 8001206:	2308      	movs	r3, #8
 8001208:	617b      	str	r3, [r7, #20]
		break;
 800120a:	e008      	b.n	800121e <TT_Get_Pressure+0x62>
	case (2):
		Wait_time = 14;
 800120c:	230e      	movs	r3, #14
 800120e:	617b      	str	r3, [r7, #20]
		break;
 8001210:	e005      	b.n	800121e <TT_Get_Pressure+0x62>
 8001212:	bf00      	nop
 8001214:	08005238 	.word	0x08005238
	case (3):
		Wait_time = 26;
 8001218:	231a      	movs	r3, #26
 800121a:	617b      	str	r3, [r7, #20]
		break;
 800121c:	bf00      	nop
	}
	HAL_I2C_Mem_Write(&hi2c1, BMP_180_WRITE_ADRESS,
 800121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001222:	9302      	str	r3, [sp, #8]
 8001224:	2301      	movs	r3, #1
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2301      	movs	r3, #1
 8001230:	22f4      	movs	r2, #244	; 0xf4
 8001232:	21ee      	movs	r1, #238	; 0xee
 8001234:	48ba      	ldr	r0, [pc, #744]	; (8001520 <TT_Get_Pressure+0x364>)
 8001236:	f001 f97f 	bl	8002538 <HAL_I2C_Mem_Write>
	TEMP_AND_PRES_WRITE_REG, 1, pressure_write_data, 1, 1000);
	HAL_Delay(Wait_time);
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	4618      	mov	r0, r3
 800123e:	f000 fd7f 	bl	8001d40 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_180_READ_ADRESS, READ_TEMP_AND_PRES_REG, 1,
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	2303      	movs	r3, #3
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	22f6      	movs	r2, #246	; 0xf6
 8001256:	21ef      	movs	r1, #239	; 0xef
 8001258:	48b1      	ldr	r0, [pc, #708]	; (8001520 <TT_Get_Pressure+0x364>)
 800125a:	f001 fa67 	bl	800272c <HAL_I2C_Mem_Read>
			pressure_val, 3, 1000);
	UP = (pressure_val[0] << 16 | pressure_val[1] << 8 | pressure_val[0])
 800125e:	7b3b      	ldrb	r3, [r7, #12]
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	7b7b      	ldrb	r3, [r7, #13]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	4313      	orrs	r3, r2
 8001268:	7b3a      	ldrb	r2, [r7, #12]
 800126a:	431a      	orrs	r2, r3
			>> (8 - (uint8_t) oss);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	f1c3 0308 	rsb	r3, r3, #8
 8001274:	fa42 f303 	asr.w	r3, r2, r3
	UP = (pressure_val[0] << 16 | pressure_val[1] << 8 | pressure_val[0])
 8001278:	4aaa      	ldr	r2, [pc, #680]	; (8001524 <TT_Get_Pressure+0x368>)
 800127a:	6013      	str	r3, [r2, #0]

	X1 = ((UT - AC6) * (AC5 / (pow(2, 15))));
 800127c:	4baa      	ldr	r3, [pc, #680]	; (8001528 <TT_Get_Pressure+0x36c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4aaa      	ldr	r2, [pc, #680]	; (800152c <TT_Get_Pressure+0x370>)
 8001282:	8812      	ldrh	r2, [r2, #0]
 8001284:	1a9b      	subs	r3, r3, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f910 	bl	80004ac <__aeabi_i2d>
 800128c:	4604      	mov	r4, r0
 800128e:	460d      	mov	r5, r1
 8001290:	4ba7      	ldr	r3, [pc, #668]	; (8001530 <TT_Get_Pressure+0x374>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f909 	bl	80004ac <__aeabi_i2d>
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	4ba5      	ldr	r3, [pc, #660]	; (8001534 <TT_Get_Pressure+0x378>)
 80012a0:	f7ff fa98 	bl	80007d4 <__aeabi_ddiv>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4620      	mov	r0, r4
 80012aa:	4629      	mov	r1, r5
 80012ac:	f7ff f968 	bl	8000580 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff fc12 	bl	8000ae0 <__aeabi_d2iz>
 80012bc:	4603      	mov	r3, r0
 80012be:	4a9e      	ldr	r2, [pc, #632]	; (8001538 <TT_Get_Pressure+0x37c>)
 80012c0:	6013      	str	r3, [r2, #0]
	X2 = ((MC * (pow(2, 11))) / (X1 + MD));
 80012c2:	4b9e      	ldr	r3, [pc, #632]	; (800153c <TT_Get_Pressure+0x380>)
 80012c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f8ef 	bl	80004ac <__aeabi_i2d>
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	4b9b      	ldr	r3, [pc, #620]	; (8001540 <TT_Get_Pressure+0x384>)
 80012d4:	f7ff f954 	bl	8000580 <__aeabi_dmul>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4614      	mov	r4, r2
 80012de:	461d      	mov	r5, r3
 80012e0:	4b98      	ldr	r3, [pc, #608]	; (8001544 <TT_Get_Pressure+0x388>)
 80012e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b93      	ldr	r3, [pc, #588]	; (8001538 <TT_Get_Pressure+0x37c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4413      	add	r3, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f8dc 	bl	80004ac <__aeabi_i2d>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7ff fa6a 	bl	80007d4 <__aeabi_ddiv>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fbea 	bl	8000ae0 <__aeabi_d2iz>
 800130c:	4603      	mov	r3, r0
 800130e:	4a8e      	ldr	r2, [pc, #568]	; (8001548 <TT_Get_Pressure+0x38c>)
 8001310:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8001312:	4b89      	ldr	r3, [pc, #548]	; (8001538 <TT_Get_Pressure+0x37c>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b8c      	ldr	r3, [pc, #560]	; (8001548 <TT_Get_Pressure+0x38c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4413      	add	r3, r2
 800131c:	4a8b      	ldr	r2, [pc, #556]	; (800154c <TT_Get_Pressure+0x390>)
 800131e:	6013      	str	r3, [r2, #0]
	B6 = B5 - 4000;
 8001320:	4b8a      	ldr	r3, [pc, #552]	; (800154c <TT_Get_Pressure+0x390>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001328:	4a89      	ldr	r2, [pc, #548]	; (8001550 <TT_Get_Pressure+0x394>)
 800132a:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 11));
 800132c:	4b89      	ldr	r3, [pc, #548]	; (8001554 <TT_Get_Pressure+0x398>)
 800132e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f8ba 	bl	80004ac <__aeabi_i2d>
 8001338:	4604      	mov	r4, r0
 800133a:	460d      	mov	r5, r1
 800133c:	4b84      	ldr	r3, [pc, #528]	; (8001550 <TT_Get_Pressure+0x394>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a83      	ldr	r2, [pc, #524]	; (8001550 <TT_Get_Pressure+0x394>)
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	fb02 f303 	mul.w	r3, r2, r3
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f8af 	bl	80004ac <__aeabi_i2d>
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	4b81      	ldr	r3, [pc, #516]	; (8001558 <TT_Get_Pressure+0x39c>)
 8001354:	f7ff fa3e 	bl	80007d4 <__aeabi_ddiv>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4620      	mov	r0, r4
 800135e:	4629      	mov	r1, r5
 8001360:	f7ff f90e 	bl	8000580 <__aeabi_dmul>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4610      	mov	r0, r2
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	4b73      	ldr	r3, [pc, #460]	; (8001540 <TT_Get_Pressure+0x384>)
 8001372:	f7ff fa2f 	bl	80007d4 <__aeabi_ddiv>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f7ff fbaf 	bl	8000ae0 <__aeabi_d2iz>
 8001382:	4603      	mov	r3, r0
 8001384:	4a6c      	ldr	r2, [pc, #432]	; (8001538 <TT_Get_Pressure+0x37c>)
 8001386:	6013      	str	r3, [r2, #0]
	X2 = AC2 * B6 / (pow(2, 11));
 8001388:	4b74      	ldr	r3, [pc, #464]	; (800155c <TT_Get_Pressure+0x3a0>)
 800138a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138e:	461a      	mov	r2, r3
 8001390:	4b6f      	ldr	r3, [pc, #444]	; (8001550 <TT_Get_Pressure+0x394>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	fb02 f303 	mul.w	r3, r2, r3
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f887 	bl	80004ac <__aeabi_i2d>
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4b67      	ldr	r3, [pc, #412]	; (8001540 <TT_Get_Pressure+0x384>)
 80013a4:	f7ff fa16 	bl	80007d4 <__aeabi_ddiv>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fb96 	bl	8000ae0 <__aeabi_d2iz>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a64      	ldr	r2, [pc, #400]	; (8001548 <TT_Get_Pressure+0x38c>)
 80013b8:	6013      	str	r3, [r2, #0]
	X3 = X1 + X2;
 80013ba:	4b5f      	ldr	r3, [pc, #380]	; (8001538 <TT_Get_Pressure+0x37c>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b62      	ldr	r3, [pc, #392]	; (8001548 <TT_Get_Pressure+0x38c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a66      	ldr	r2, [pc, #408]	; (8001560 <TT_Get_Pressure+0x3a4>)
 80013c6:	6013      	str	r3, [r2, #0]
	B3 = (((AC1 * 4 + X3) << oss) + 2) / 4;
 80013c8:	4b66      	ldr	r3, [pc, #408]	; (8001564 <TT_Get_Pressure+0x3a8>)
 80013ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ce:	009a      	lsls	r2, r3, #2
 80013d0:	4b63      	ldr	r3, [pc, #396]	; (8001560 <TT_Get_Pressure+0x3a4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	441a      	add	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	3302      	adds	r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	da00      	bge.n	80013e4 <TT_Get_Pressure+0x228>
 80013e2:	3303      	adds	r3, #3
 80013e4:	109b      	asrs	r3, r3, #2
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b5f      	ldr	r3, [pc, #380]	; (8001568 <TT_Get_Pressure+0x3ac>)
 80013ea:	601a      	str	r2, [r3, #0]
	X1 = AC3 * B6 / pow(2, 13);
 80013ec:	4b5f      	ldr	r3, [pc, #380]	; (800156c <TT_Get_Pressure+0x3b0>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b56      	ldr	r3, [pc, #344]	; (8001550 <TT_Get_Pressure+0x394>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	fb02 f303 	mul.w	r3, r2, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f855 	bl	80004ac <__aeabi_i2d>
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	4b5a      	ldr	r3, [pc, #360]	; (8001570 <TT_Get_Pressure+0x3b4>)
 8001408:	f7ff f9e4 	bl	80007d4 <__aeabi_ddiv>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4610      	mov	r0, r2
 8001412:	4619      	mov	r1, r3
 8001414:	f7ff fb64 	bl	8000ae0 <__aeabi_d2iz>
 8001418:	4603      	mov	r3, r0
 800141a:	4a47      	ldr	r2, [pc, #284]	; (8001538 <TT_Get_Pressure+0x37c>)
 800141c:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 16));
 800141e:	4b55      	ldr	r3, [pc, #340]	; (8001574 <TT_Get_Pressure+0x3b8>)
 8001420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f841 	bl	80004ac <__aeabi_i2d>
 800142a:	4604      	mov	r4, r0
 800142c:	460d      	mov	r5, r1
 800142e:	4b48      	ldr	r3, [pc, #288]	; (8001550 <TT_Get_Pressure+0x394>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a47      	ldr	r2, [pc, #284]	; (8001550 <TT_Get_Pressure+0x394>)
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	fb02 f303 	mul.w	r3, r2, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f836 	bl	80004ac <__aeabi_i2d>
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	4b44      	ldr	r3, [pc, #272]	; (8001558 <TT_Get_Pressure+0x39c>)
 8001446:	f7ff f9c5 	bl	80007d4 <__aeabi_ddiv>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4620      	mov	r0, r4
 8001450:	4629      	mov	r1, r5
 8001452:	f7ff f895 	bl	8000580 <__aeabi_dmul>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	4b45      	ldr	r3, [pc, #276]	; (8001578 <TT_Get_Pressure+0x3bc>)
 8001464:	f7ff f9b6 	bl	80007d4 <__aeabi_ddiv>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	f7ff fb36 	bl	8000ae0 <__aeabi_d2iz>
 8001474:	4603      	mov	r3, r0
 8001476:	4a34      	ldr	r2, [pc, #208]	; (8001548 <TT_Get_Pressure+0x38c>)
 8001478:	6013      	str	r3, [r2, #0]
	X3 = ((X1 + X2) + 2) / pow(2, 2);
 800147a:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <TT_Get_Pressure+0x37c>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b32      	ldr	r3, [pc, #200]	; (8001548 <TT_Get_Pressure+0x38c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	3302      	adds	r3, #2
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f810 	bl	80004ac <__aeabi_i2d>
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	4b3a      	ldr	r3, [pc, #232]	; (800157c <TT_Get_Pressure+0x3c0>)
 8001492:	f7ff f99f 	bl	80007d4 <__aeabi_ddiv>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff fb1f 	bl	8000ae0 <__aeabi_d2iz>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4a2e      	ldr	r2, [pc, #184]	; (8001560 <TT_Get_Pressure+0x3a4>)
 80014a6:	6013      	str	r3, [r2, #0]
	B4 = AC4 * (unsigned long) (X3 + 32768) / (pow(2, 15));
 80014a8:	4b35      	ldr	r3, [pc, #212]	; (8001580 <TT_Get_Pressure+0x3c4>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <TT_Get_Pressure+0x3a4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80014b6:	fb02 f303 	mul.w	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7fe ffe6 	bl	800048c <__aeabi_ui2d>
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <TT_Get_Pressure+0x378>)
 80014c6:	f7ff f985 	bl	80007d4 <__aeabi_ddiv>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fb2d 	bl	8000b30 <__aeabi_d2uiz>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <TT_Get_Pressure+0x3c8>)
 80014da:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long) UP - B3) * (50000 >> oss);
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <TT_Get_Pressure+0x368>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <TT_Get_Pressure+0x3ac>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	fa41 f202 	asr.w	r2, r1, r2
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	4a24      	ldr	r2, [pc, #144]	; (8001588 <TT_Get_Pressure+0x3cc>)
 80014f8:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000)
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <TT_Get_Pressure+0x3cc>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	db44      	blt.n	800158c <TT_Get_Pressure+0x3d0>
		Press = (B7 * 2) / B4;
 8001502:	4b21      	ldr	r3, [pc, #132]	; (8001588 <TT_Get_Pressure+0x3cc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	005a      	lsls	r2, r3, #1
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <TT_Get_Pressure+0x3c8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001510:	ee07 3a90 	vmov	s15, r3
 8001514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001518:	edc7 7a04 	vstr	s15, [r7, #16]
 800151c:	e043      	b.n	80015a6 <TT_Get_Pressure+0x3ea>
 800151e:	bf00      	nop
 8001520:	200000cc 	.word	0x200000cc
 8001524:	200000a8 	.word	0x200000a8
 8001528:	200000a4 	.word	0x200000a4
 800152c:	20000096 	.word	0x20000096
 8001530:	20000094 	.word	0x20000094
 8001534:	40e00000 	.word	0x40e00000
 8001538:	200000ac 	.word	0x200000ac
 800153c:	2000009e 	.word	0x2000009e
 8001540:	40a00000 	.word	0x40a00000
 8001544:	200000a0 	.word	0x200000a0
 8001548:	200000b0 	.word	0x200000b0
 800154c:	200000bc 	.word	0x200000bc
 8001550:	200000c4 	.word	0x200000c4
 8001554:	2000009a 	.word	0x2000009a
 8001558:	40b00000 	.word	0x40b00000
 800155c:	2000008e 	.word	0x2000008e
 8001560:	200000b4 	.word	0x200000b4
 8001564:	2000008c 	.word	0x2000008c
 8001568:	200000b8 	.word	0x200000b8
 800156c:	20000090 	.word	0x20000090
 8001570:	40c00000 	.word	0x40c00000
 8001574:	20000098 	.word	0x20000098
 8001578:	40f00000 	.word	0x40f00000
 800157c:	40100000 	.word	0x40100000
 8001580:	20000092 	.word	0x20000092
 8001584:	200000c0 	.word	0x200000c0
 8001588:	200000c8 	.word	0x200000c8
	else
		Press = (B7 / B4) * 2;
 800158c:	4b44      	ldr	r3, [pc, #272]	; (80016a0 <TT_Get_Pressure+0x4e4>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b44      	ldr	r3, [pc, #272]	; (80016a4 <TT_Get_Pressure+0x4e8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	fbb2 f3f3 	udiv	r3, r2, r3
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	ee07 3a90 	vmov	s15, r3
 800159e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a2:	edc7 7a04 	vstr	s15, [r7, #16]
	X1 = (Press / (pow(2, 8))) * (Press / (pow(2, 8)));
 80015a6:	6938      	ldr	r0, [r7, #16]
 80015a8:	f7fe ff92 	bl	80004d0 <__aeabi_f2d>
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <TT_Get_Pressure+0x4ec>)
 80015b2:	f7ff f90f 	bl	80007d4 <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4614      	mov	r4, r2
 80015bc:	461d      	mov	r5, r3
 80015be:	6938      	ldr	r0, [r7, #16]
 80015c0:	f7fe ff86 	bl	80004d0 <__aeabi_f2d>
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	4b37      	ldr	r3, [pc, #220]	; (80016a8 <TT_Get_Pressure+0x4ec>)
 80015ca:	f7ff f903 	bl	80007d4 <__aeabi_ddiv>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4620      	mov	r0, r4
 80015d4:	4629      	mov	r1, r5
 80015d6:	f7fe ffd3 	bl	8000580 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f7ff fa7d 	bl	8000ae0 <__aeabi_d2iz>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a30      	ldr	r2, [pc, #192]	; (80016ac <TT_Get_Pressure+0x4f0>)
 80015ea:	6013      	str	r3, [r2, #0]
	X1 = (X1 * 3038) / (pow(2, 16));
 80015ec:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <TT_Get_Pressure+0x4f0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f640 32de 	movw	r2, #3038	; 0xbde
 80015f4:	fb02 f303 	mul.w	r3, r2, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ff57 	bl	80004ac <__aeabi_i2d>
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <TT_Get_Pressure+0x4f4>)
 8001604:	f7ff f8e6 	bl	80007d4 <__aeabi_ddiv>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff fa66 	bl	8000ae0 <__aeabi_d2iz>
 8001614:	4603      	mov	r3, r0
 8001616:	4a25      	ldr	r2, [pc, #148]	; (80016ac <TT_Get_Pressure+0x4f0>)
 8001618:	6013      	str	r3, [r2, #0]
	X2 = (-7357 * Press) / (pow(2, 16));
 800161a:	edd7 7a04 	vldr	s15, [r7, #16]
 800161e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80016b4 <TT_Get_Pressure+0x4f8>
 8001622:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001626:	ee17 0a90 	vmov	r0, s15
 800162a:	f7fe ff51 	bl	80004d0 <__aeabi_f2d>
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <TT_Get_Pressure+0x4f4>)
 8001634:	f7ff f8ce 	bl	80007d4 <__aeabi_ddiv>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f7ff fa4e 	bl	8000ae0 <__aeabi_d2iz>
 8001644:	4603      	mov	r3, r0
 8001646:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <TT_Get_Pressure+0x4fc>)
 8001648:	6013      	str	r3, [r2, #0]
	Press = Press + (X1 + X2 + 3791) / (pow(2, 4));
 800164a:	6938      	ldr	r0, [r7, #16]
 800164c:	f7fe ff40 	bl	80004d0 <__aeabi_f2d>
 8001650:	4604      	mov	r4, r0
 8001652:	460d      	mov	r5, r1
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <TT_Get_Pressure+0x4f0>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <TT_Get_Pressure+0x4fc>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4413      	add	r3, r2
 800165e:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff22 	bl	80004ac <__aeabi_i2d>
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <TT_Get_Pressure+0x500>)
 800166e:	f7ff f8b1 	bl	80007d4 <__aeabi_ddiv>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4620      	mov	r0, r4
 8001678:	4629      	mov	r1, r5
 800167a:	f7fe fdcb 	bl	8000214 <__adddf3>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff fa73 	bl	8000b70 <__aeabi_d2f>
 800168a:	4603      	mov	r3, r0
 800168c:	613b      	str	r3, [r7, #16]
	return Press;
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	ee07 3a90 	vmov	s15, r3
}
 8001694:	eeb0 0a67 	vmov.f32	s0, s15
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bdb0      	pop	{r4, r5, r7, pc}
 800169e:	bf00      	nop
 80016a0:	200000c8 	.word	0x200000c8
 80016a4:	200000c0 	.word	0x200000c0
 80016a8:	40700000 	.word	0x40700000
 80016ac:	200000ac 	.word	0x200000ac
 80016b0:	40f00000 	.word	0x40f00000
 80016b4:	c5e5e800 	.word	0xc5e5e800
 80016b8:	200000b0 	.word	0x200000b0
 80016bc:	40300000 	.word	0x40300000

080016c0 <TT_Get_Altitude>:

float TT_Get_Altitude(int altitude_oss) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	float P = TT_Get_Pressure(altitude_oss);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fd77 	bl	80011bc <TT_Get_Pressure>
 80016ce:	ed87 0a03 	vstr	s0, [r7, #12]
	return 44330 * (1 - (pow((P / (float) Po), 1 / 5.255)));
 80016d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80016d6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001748 <TT_Get_Altitude+0x88>
 80016da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016de:	ee16 0a90 	vmov	r0, s13
 80016e2:	f7fe fef5 	bl	80004d0 <__aeabi_f2d>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001738 <TT_Get_Altitude+0x78>
 80016ee:	ec43 2b10 	vmov	d0, r2, r3
 80016f2:	f002 fe79 	bl	80043e8 <pow>
 80016f6:	ec53 2b10 	vmov	r2, r3, d0
 80016fa:	f04f 0000 	mov.w	r0, #0
 80016fe:	4913      	ldr	r1, [pc, #76]	; (800174c <TT_Get_Altitude+0x8c>)
 8001700:	f7fe fd86 	bl	8000210 <__aeabi_dsub>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	a30c      	add	r3, pc, #48	; (adr r3, 8001740 <TT_Get_Altitude+0x80>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f7fe ff35 	bl	8000580 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff fa27 	bl	8000b70 <__aeabi_d2f>
 8001722:	4603      	mov	r3, r0
 8001724:	ee07 3a90 	vmov	s15, r3
}
 8001728:	eeb0 0a67 	vmov.f32	s0, s15
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	f3af 8000 	nop.w
 8001738:	ccd9456c 	.word	0xccd9456c
 800173c:	3fc85b95 	.word	0x3fc85b95
 8001740:	00000000 	.word	0x00000000
 8001744:	40e5a540 	.word	0x40e5a540
 8001748:	47c5e680 	.word	0x47c5e680
 800174c:	3ff00000 	.word	0x3ff00000

08001750 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001754:	f000 fa82 	bl	8001c5c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001758:	f000 f828 	bl	80017ac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800175c:	f000 f8ec 	bl	8001938 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001760:	f000 f8c0 	bl	80018e4 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8001764:	f000 f890 	bl	8001888 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	TT_BMP180_Init_Read_Cal_Data();
 8001768:	f7ff fbd4 	bl	8000f14 <TT_BMP180_Init_Read_Cal_Data>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		Temperature = TT_Get_Temp_Int();
 800176c:	f7ff fd1a 	bl	80011a4 <TT_Get_Temp_Int>
 8001770:	ee07 0a90 	vmov	s15, r0
 8001774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <main+0x50>)
 800177a:	edc3 7a00 	vstr	s15, [r3]
		Pressure=TT_Get_Pressure(3);
 800177e:	2003      	movs	r0, #3
 8001780:	f7ff fd1c 	bl	80011bc <TT_Get_Pressure>
 8001784:	eef0 7a40 	vmov.f32	s15, s0
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <main+0x54>)
 800178a:	edc3 7a00 	vstr	s15, [r3]
		Altitude = TT_Get_Altitude(3);
 800178e:	2003      	movs	r0, #3
 8001790:	f7ff ff96 	bl	80016c0 <TT_Get_Altitude>
 8001794:	eef0 7a40 	vmov.f32	s15, s0
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <main+0x58>)
 800179a:	edc3 7a00 	vstr	s15, [r3]
		Temperature = TT_Get_Temp_Int();
 800179e:	e7e5      	b.n	800176c <main+0x1c>
 80017a0:	20000164 	.word	0x20000164
 80017a4:	2000016c 	.word	0x2000016c
 80017a8:	20000168 	.word	0x20000168

080017ac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b094      	sub	sp, #80	; 0x50
 80017b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80017b2:	f107 031c 	add.w	r3, r7, #28
 80017b6:	2234      	movs	r2, #52	; 0x34
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f002 fe0c 	bl	80043d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <SystemClock_Config+0xd4>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	4a29      	ldr	r2, [pc, #164]	; (8001880 <SystemClock_Config+0xd4>)
 80017da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017de:	6413      	str	r3, [r2, #64]	; 0x40
 80017e0:	4b27      	ldr	r3, [pc, #156]	; (8001880 <SystemClock_Config+0xd4>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017ec:	2300      	movs	r3, #0
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	4b24      	ldr	r3, [pc, #144]	; (8001884 <SystemClock_Config+0xd8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017f8:	4a22      	ldr	r2, [pc, #136]	; (8001884 <SystemClock_Config+0xd8>)
 80017fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b20      	ldr	r3, [pc, #128]	; (8001884 <SystemClock_Config+0xd8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800180c:	2302      	movs	r3, #2
 800180e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001810:	2301      	movs	r3, #1
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001814:	2310      	movs	r3, #16
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001818:	2302      	movs	r3, #2
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800181c:	2300      	movs	r3, #0
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001820:	2310      	movs	r3, #16
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001824:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001828:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800182a:	2304      	movs	r3, #4
 800182c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800182e:	2302      	movs	r3, #2
 8001830:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001832:	2302      	movs	r3, #2
 8001834:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	4618      	mov	r0, r3
 800183c:	f002 f842 	bl	80038c4 <HAL_RCC_OscConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <SystemClock_Config+0x9e>
		Error_Handler();
 8001846:	f000 f8e5 	bl	8001a14 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800184a:	230f      	movs	r3, #15
 800184c:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800184e:	2302      	movs	r3, #2
 8001850:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001860:	f107 0308 	add.w	r3, r7, #8
 8001864:	2102      	movs	r1, #2
 8001866:	4618      	mov	r0, r3
 8001868:	f001 fce2 	bl	8003230 <HAL_RCC_ClockConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SystemClock_Config+0xca>
		Error_Handler();
 8001872:	f000 f8cf 	bl	8001a14 <Error_Handler>
	}
}
 8001876:	bf00      	nop
 8001878:	3750      	adds	r7, #80	; 0x50
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	40007000 	.word	0x40007000

08001888 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_I2C1_Init+0x50>)
 800188e:	4a13      	ldr	r2, [pc, #76]	; (80018dc <MX_I2C1_Init+0x54>)
 8001890:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_I2C1_Init+0x50>)
 8001894:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <MX_I2C1_Init+0x58>)
 8001896:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_I2C1_Init+0x50>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018aa:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018c6:	f000 fcf3 	bl	80022b0 <HAL_I2C_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80018d0:	f000 f8a0 	bl	8001a14 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200000cc 	.word	0x200000cc
 80018dc:	40005400 	.word	0x40005400
 80018e0:	00061a80 	.word	0x00061a80

080018e4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_USART2_UART_Init+0x4c>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <MX_USART2_UART_Init+0x50>)
 80018ec:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <MX_USART2_UART_Init+0x4c>)
 80018f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <MX_USART2_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <MX_USART2_UART_Init+0x4c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <MX_USART2_UART_Init+0x4c>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_USART2_UART_Init+0x4c>)
 800190a:	220c      	movs	r2, #12
 800190c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <MX_USART2_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_USART2_UART_Init+0x4c>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_USART2_UART_Init+0x4c>)
 800191c:	f002 fa70 	bl	8003e00 <HAL_UART_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001926:	f000 f875 	bl	8001a14 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000120 	.word	0x20000120
 8001934:	40004400 	.word	0x40004400

08001938 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <MX_GPIO_Init+0xd0>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a2c      	ldr	r2, [pc, #176]	; (8001a08 <MX_GPIO_Init+0xd0>)
 8001958:	f043 0304 	orr.w	r3, r3, #4
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <MX_GPIO_Init+0xd0>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <MX_GPIO_Init+0xd0>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a25      	ldr	r2, [pc, #148]	; (8001a08 <MX_GPIO_Init+0xd0>)
 8001974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <MX_GPIO_Init+0xd0>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <MX_GPIO_Init+0xd0>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a1e      	ldr	r2, [pc, #120]	; (8001a08 <MX_GPIO_Init+0xd0>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <MX_GPIO_Init+0xd0>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <MX_GPIO_Init+0xd0>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <MX_GPIO_Init+0xd0>)
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <MX_GPIO_Init+0xd0>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	2120      	movs	r1, #32
 80019c2:	4812      	ldr	r0, [pc, #72]	; (8001a0c <MX_GPIO_Init+0xd4>)
 80019c4:	f000 fc5a 	bl	800227c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80019c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019cc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	480c      	ldr	r0, [pc, #48]	; (8001a10 <MX_GPIO_Init+0xd8>)
 80019e0:	f000 fab8 	bl	8001f54 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80019e4:	2320      	movs	r3, #32
 80019e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4619      	mov	r1, r3
 80019fa:	4804      	ldr	r0, [pc, #16]	; (8001a0c <MX_GPIO_Init+0xd4>)
 80019fc:	f000 faaa 	bl	8001f54 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001a00:	bf00      	nop
 8001a02:	3728      	adds	r7, #40	; 0x28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	40020800 	.word	0x40020800

08001a14 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a18:	b672      	cpsid	i
}
 8001a1a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a1c:	e7fe      	b.n	8001a1c <Error_Handler+0x8>
	...

08001a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a34:	6453      	str	r3, [r2, #68]	; 0x44
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	603b      	str	r3, [r7, #0]
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a5e:	2007      	movs	r0, #7
 8001a60:	f000 fa44 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40023800 	.word	0x40023800

08001a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a19      	ldr	r2, [pc, #100]	; (8001af4 <HAL_I2C_MspInit+0x84>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d12b      	bne.n	8001aea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_I2C_MspInit+0x88>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <HAL_I2C_MspInit+0x88>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_I2C_MspInit+0x88>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aae:	23c0      	movs	r3, #192	; 0xc0
 8001ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab2:	2312      	movs	r3, #18
 8001ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	480c      	ldr	r0, [pc, #48]	; (8001afc <HAL_I2C_MspInit+0x8c>)
 8001aca:	f000 fa43 	bl	8001f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_I2C_MspInit+0x88>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a08      	ldr	r2, [pc, #32]	; (8001af8 <HAL_I2C_MspInit+0x88>)
 8001ad8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_I2C_MspInit+0x88>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	; 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40005400 	.word	0x40005400
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020400 	.word	0x40020400

08001b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <HAL_UART_MspInit+0x84>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d12b      	bne.n	8001b7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <HAL_UART_MspInit+0x88>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <HAL_UART_MspInit+0x88>)
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b30:	6413      	str	r3, [r2, #64]	; 0x40
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_UART_MspInit+0x88>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_UART_MspInit+0x88>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a10      	ldr	r2, [pc, #64]	; (8001b88 <HAL_UART_MspInit+0x88>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_UART_MspInit+0x88>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b5a:	230c      	movs	r3, #12
 8001b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b66:	2303      	movs	r3, #3
 8001b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b6a:	2307      	movs	r3, #7
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <HAL_UART_MspInit+0x8c>)
 8001b76:	f000 f9ed 	bl	8001f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b7a:	bf00      	nop
 8001b7c:	3728      	adds	r7, #40	; 0x28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40004400 	.word	0x40004400
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020000 	.word	0x40020000

08001b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <NMI_Handler+0x4>

08001b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b9a:	e7fe      	b.n	8001b9a <HardFault_Handler+0x4>

08001b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <MemManage_Handler+0x4>

08001ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <BusFault_Handler+0x4>

08001ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <UsageFault_Handler+0x4>

08001bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bdc:	f000 f890 	bl	8001d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <SystemInit+0x20>)
 8001bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <SystemInit+0x20>)
 8001bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c0c:	480d      	ldr	r0, [pc, #52]	; (8001c44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c0e:	490e      	ldr	r1, [pc, #56]	; (8001c48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c10:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c14:	e002      	b.n	8001c1c <LoopCopyDataInit>

08001c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1a:	3304      	adds	r3, #4

08001c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c20:	d3f9      	bcc.n	8001c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c22:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c24:	4c0b      	ldr	r4, [pc, #44]	; (8001c54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c28:	e001      	b.n	8001c2e <LoopFillZerobss>

08001c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c2c:	3204      	adds	r2, #4

08001c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c30:	d3fb      	bcc.n	8001c2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c32:	f7ff ffd7 	bl	8001be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c36:	f002 fbab 	bl	8004390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c3a:	f7ff fd89 	bl	8001750 <main>
  bx  lr    
 8001c3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c4c:	08005298 	.word	0x08005298
  ldr r2, =_sbss
 8001c50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c54:	20000174 	.word	0x20000174

08001c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c58:	e7fe      	b.n	8001c58 <ADC_IRQHandler>
	...

08001c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <HAL_Init+0x40>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0d      	ldr	r2, [pc, #52]	; (8001c9c <HAL_Init+0x40>)
 8001c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <HAL_Init+0x40>)
 8001c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <HAL_Init+0x40>)
 8001c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c84:	2003      	movs	r0, #3
 8001c86:	f000 f931 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f000 f808 	bl	8001ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c90:	f7ff fec6 	bl	8001a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023c00 	.word	0x40023c00

08001ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_InitTick+0x54>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_InitTick+0x58>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f93b 	bl	8001f3a <HAL_SYSTICK_Config>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00e      	b.n	8001cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b0f      	cmp	r3, #15
 8001cd2:	d80a      	bhi.n	8001cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cdc:	f000 f911 	bl	8001f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce0:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <HAL_InitTick+0x5c>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e000      	b.n	8001cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	20000004 	.word	0x20000004

08001d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_IncTick+0x20>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_IncTick+0x24>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <HAL_IncTick+0x24>)
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000008 	.word	0x20000008
 8001d24:	20000170 	.word	0x20000170

08001d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <HAL_GetTick+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000170 	.word	0x20000170

08001d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff ffee 	bl	8001d28 <HAL_GetTick>
 8001d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d005      	beq.n	8001d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_Delay+0x44>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d66:	bf00      	nop
 8001d68:	f7ff ffde 	bl	8001d28 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d8f7      	bhi.n	8001d68 <HAL_Delay+0x28>
  {
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000008 	.word	0x20000008

08001d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da4:	4013      	ands	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dba:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	60d3      	str	r3, [r2, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f003 0307 	and.w	r3, r3, #7
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	; (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	; (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f1c3 0307 	rsb	r3, r3, #7
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf28      	it	cs
 8001e5e:	2304      	movcs	r3, #4
 8001e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d902      	bls.n	8001e70 <NVIC_EncodePriority+0x30>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	e000      	b.n	8001e72 <NVIC_EncodePriority+0x32>
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	4313      	orrs	r3, r2
         );
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	; 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb8:	d301      	bcc.n	8001ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <SysTick_Config+0x40>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f7ff ff8e 	bl	8001dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff47 	bl	8001d88 <__NVIC_SetPriorityGrouping>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff5c 	bl	8001dd0 <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff8e 	bl	8001e40 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff5d 	bl	8001dec <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffb0 	bl	8001ea8 <SysTick_Config>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e165      	b.n	800223c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f70:	2201      	movs	r2, #1
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	f040 8154 	bne.w	8002236 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d005      	beq.n	8001fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d130      	bne.n	8002008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fdc:	2201      	movs	r2, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	f003 0201 	and.w	r2, r3, #1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b03      	cmp	r3, #3
 8002012:	d017      	beq.n	8002044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d123      	bne.n	8002098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	08da      	lsrs	r2, r3, #3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3208      	adds	r2, #8
 8002058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	220f      	movs	r2, #15
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	08da      	lsrs	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3208      	adds	r2, #8
 8002092:	69b9      	ldr	r1, [r7, #24]
 8002094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0203 	and.w	r2, r3, #3
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80ae 	beq.w	8002236 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b5d      	ldr	r3, [pc, #372]	; (8002254 <HAL_GPIO_Init+0x300>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	4a5c      	ldr	r2, [pc, #368]	; (8002254 <HAL_GPIO_Init+0x300>)
 80020e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ea:	4b5a      	ldr	r3, [pc, #360]	; (8002254 <HAL_GPIO_Init+0x300>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020f6:	4a58      	ldr	r2, [pc, #352]	; (8002258 <HAL_GPIO_Init+0x304>)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	089b      	lsrs	r3, r3, #2
 80020fc:	3302      	adds	r3, #2
 80020fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	220f      	movs	r2, #15
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4f      	ldr	r2, [pc, #316]	; (800225c <HAL_GPIO_Init+0x308>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d025      	beq.n	800216e <HAL_GPIO_Init+0x21a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4e      	ldr	r2, [pc, #312]	; (8002260 <HAL_GPIO_Init+0x30c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01f      	beq.n	800216a <HAL_GPIO_Init+0x216>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4d      	ldr	r2, [pc, #308]	; (8002264 <HAL_GPIO_Init+0x310>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d019      	beq.n	8002166 <HAL_GPIO_Init+0x212>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4c      	ldr	r2, [pc, #304]	; (8002268 <HAL_GPIO_Init+0x314>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_GPIO_Init+0x20e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a4b      	ldr	r2, [pc, #300]	; (800226c <HAL_GPIO_Init+0x318>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00d      	beq.n	800215e <HAL_GPIO_Init+0x20a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a4a      	ldr	r2, [pc, #296]	; (8002270 <HAL_GPIO_Init+0x31c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d007      	beq.n	800215a <HAL_GPIO_Init+0x206>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a49      	ldr	r2, [pc, #292]	; (8002274 <HAL_GPIO_Init+0x320>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d101      	bne.n	8002156 <HAL_GPIO_Init+0x202>
 8002152:	2306      	movs	r3, #6
 8002154:	e00c      	b.n	8002170 <HAL_GPIO_Init+0x21c>
 8002156:	2307      	movs	r3, #7
 8002158:	e00a      	b.n	8002170 <HAL_GPIO_Init+0x21c>
 800215a:	2305      	movs	r3, #5
 800215c:	e008      	b.n	8002170 <HAL_GPIO_Init+0x21c>
 800215e:	2304      	movs	r3, #4
 8002160:	e006      	b.n	8002170 <HAL_GPIO_Init+0x21c>
 8002162:	2303      	movs	r3, #3
 8002164:	e004      	b.n	8002170 <HAL_GPIO_Init+0x21c>
 8002166:	2302      	movs	r3, #2
 8002168:	e002      	b.n	8002170 <HAL_GPIO_Init+0x21c>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_GPIO_Init+0x21c>
 800216e:	2300      	movs	r3, #0
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	f002 0203 	and.w	r2, r2, #3
 8002176:	0092      	lsls	r2, r2, #2
 8002178:	4093      	lsls	r3, r2
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002180:	4935      	ldr	r1, [pc, #212]	; (8002258 <HAL_GPIO_Init+0x304>)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	3302      	adds	r3, #2
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218e:	4b3a      	ldr	r3, [pc, #232]	; (8002278 <HAL_GPIO_Init+0x324>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021b2:	4a31      	ldr	r2, [pc, #196]	; (8002278 <HAL_GPIO_Init+0x324>)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b8:	4b2f      	ldr	r3, [pc, #188]	; (8002278 <HAL_GPIO_Init+0x324>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021dc:	4a26      	ldr	r2, [pc, #152]	; (8002278 <HAL_GPIO_Init+0x324>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021e2:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HAL_GPIO_Init+0x324>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002206:	4a1c      	ldr	r2, [pc, #112]	; (8002278 <HAL_GPIO_Init+0x324>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800220c:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <HAL_GPIO_Init+0x324>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <HAL_GPIO_Init+0x324>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3301      	adds	r3, #1
 800223a:	61fb      	str	r3, [r7, #28]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	2b0f      	cmp	r3, #15
 8002240:	f67f ae96 	bls.w	8001f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3724      	adds	r7, #36	; 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800
 8002258:	40013800 	.word	0x40013800
 800225c:	40020000 	.word	0x40020000
 8002260:	40020400 	.word	0x40020400
 8002264:	40020800 	.word	0x40020800
 8002268:	40020c00 	.word	0x40020c00
 800226c:	40021000 	.word	0x40021000
 8002270:	40021400 	.word	0x40021400
 8002274:	40021800 	.word	0x40021800
 8002278:	40013c00 	.word	0x40013c00

0800227c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	807b      	strh	r3, [r7, #2]
 8002288:	4613      	mov	r3, r2
 800228a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800228c:	787b      	ldrb	r3, [r7, #1]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002292:	887a      	ldrh	r2, [r7, #2]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002298:	e003      	b.n	80022a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800229a:	887b      	ldrh	r3, [r7, #2]
 800229c:	041a      	lsls	r2, r3, #16
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	619a      	str	r2, [r3, #24]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e12b      	b.n	800251a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d106      	bne.n	80022dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff fbca 	bl	8001a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2224      	movs	r2, #36	; 0x24
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0201 	bic.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002302:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002312:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002314:	f001 f87e 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 8002318:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4a81      	ldr	r2, [pc, #516]	; (8002524 <HAL_I2C_Init+0x274>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d807      	bhi.n	8002334 <HAL_I2C_Init+0x84>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4a80      	ldr	r2, [pc, #512]	; (8002528 <HAL_I2C_Init+0x278>)
 8002328:	4293      	cmp	r3, r2
 800232a:	bf94      	ite	ls
 800232c:	2301      	movls	r3, #1
 800232e:	2300      	movhi	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	e006      	b.n	8002342 <HAL_I2C_Init+0x92>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4a7d      	ldr	r2, [pc, #500]	; (800252c <HAL_I2C_Init+0x27c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	bf94      	ite	ls
 800233c:	2301      	movls	r3, #1
 800233e:	2300      	movhi	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0e7      	b.n	800251a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4a78      	ldr	r2, [pc, #480]	; (8002530 <HAL_I2C_Init+0x280>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0c9b      	lsrs	r3, r3, #18
 8002354:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	430a      	orrs	r2, r1
 8002368:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a6a      	ldr	r2, [pc, #424]	; (8002524 <HAL_I2C_Init+0x274>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d802      	bhi.n	8002384 <HAL_I2C_Init+0xd4>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	3301      	adds	r3, #1
 8002382:	e009      	b.n	8002398 <HAL_I2C_Init+0xe8>
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800238a:	fb02 f303 	mul.w	r3, r2, r3
 800238e:	4a69      	ldr	r2, [pc, #420]	; (8002534 <HAL_I2C_Init+0x284>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	3301      	adds	r3, #1
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	430b      	orrs	r3, r1
 800239e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	495c      	ldr	r1, [pc, #368]	; (8002524 <HAL_I2C_Init+0x274>)
 80023b4:	428b      	cmp	r3, r1
 80023b6:	d819      	bhi.n	80023ec <HAL_I2C_Init+0x13c>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1e59      	subs	r1, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80023c6:	1c59      	adds	r1, r3, #1
 80023c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023cc:	400b      	ands	r3, r1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <HAL_I2C_Init+0x138>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1e59      	subs	r1, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80023e0:	3301      	adds	r3, #1
 80023e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e6:	e051      	b.n	800248c <HAL_I2C_Init+0x1dc>
 80023e8:	2304      	movs	r3, #4
 80023ea:	e04f      	b.n	800248c <HAL_I2C_Init+0x1dc>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d111      	bne.n	8002418 <HAL_I2C_Init+0x168>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1e58      	subs	r0, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6859      	ldr	r1, [r3, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	440b      	add	r3, r1
 8002402:	fbb0 f3f3 	udiv	r3, r0, r3
 8002406:	3301      	adds	r3, #1
 8002408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240c:	2b00      	cmp	r3, #0
 800240e:	bf0c      	ite	eq
 8002410:	2301      	moveq	r3, #1
 8002412:	2300      	movne	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	e012      	b.n	800243e <HAL_I2C_Init+0x18e>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1e58      	subs	r0, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	0099      	lsls	r1, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	fbb0 f3f3 	udiv	r3, r0, r3
 800242e:	3301      	adds	r3, #1
 8002430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002434:	2b00      	cmp	r3, #0
 8002436:	bf0c      	ite	eq
 8002438:	2301      	moveq	r3, #1
 800243a:	2300      	movne	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_I2C_Init+0x196>
 8002442:	2301      	movs	r3, #1
 8002444:	e022      	b.n	800248c <HAL_I2C_Init+0x1dc>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10e      	bne.n	800246c <HAL_I2C_Init+0x1bc>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1e58      	subs	r0, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6859      	ldr	r1, [r3, #4]
 8002456:	460b      	mov	r3, r1
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	440b      	add	r3, r1
 800245c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002460:	3301      	adds	r3, #1
 8002462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800246a:	e00f      	b.n	800248c <HAL_I2C_Init+0x1dc>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1e58      	subs	r0, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6859      	ldr	r1, [r3, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	0099      	lsls	r1, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002482:	3301      	adds	r3, #1
 8002484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002488:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	6809      	ldr	r1, [r1, #0]
 8002490:	4313      	orrs	r3, r2
 8002492:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69da      	ldr	r2, [r3, #28]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6911      	ldr	r1, [r2, #16]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68d2      	ldr	r2, [r2, #12]
 80024c6:	4311      	orrs	r1, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	430b      	orrs	r3, r1
 80024ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	000186a0 	.word	0x000186a0
 8002528:	001e847f 	.word	0x001e847f
 800252c:	003d08ff 	.word	0x003d08ff
 8002530:	431bde83 	.word	0x431bde83
 8002534:	10624dd3 	.word	0x10624dd3

08002538 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	4608      	mov	r0, r1
 8002542:	4611      	mov	r1, r2
 8002544:	461a      	mov	r2, r3
 8002546:	4603      	mov	r3, r0
 8002548:	817b      	strh	r3, [r7, #10]
 800254a:	460b      	mov	r3, r1
 800254c:	813b      	strh	r3, [r7, #8]
 800254e:	4613      	mov	r3, r2
 8002550:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002552:	f7ff fbe9 	bl	8001d28 <HAL_GetTick>
 8002556:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b20      	cmp	r3, #32
 8002562:	f040 80d9 	bne.w	8002718 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2319      	movs	r3, #25
 800256c:	2201      	movs	r2, #1
 800256e:	496d      	ldr	r1, [pc, #436]	; (8002724 <HAL_I2C_Mem_Write+0x1ec>)
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 fc7f 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
 800257e:	e0cc      	b.n	800271a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_I2C_Mem_Write+0x56>
 800258a:	2302      	movs	r3, #2
 800258c:	e0c5      	b.n	800271a <HAL_I2C_Mem_Write+0x1e2>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d007      	beq.n	80025b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2221      	movs	r2, #33	; 0x21
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2240      	movs	r2, #64	; 0x40
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a3a      	ldr	r2, [r7, #32]
 80025de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4a4d      	ldr	r2, [pc, #308]	; (8002728 <HAL_I2C_Mem_Write+0x1f0>)
 80025f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025f6:	88f8      	ldrh	r0, [r7, #6]
 80025f8:	893a      	ldrh	r2, [r7, #8]
 80025fa:	8979      	ldrh	r1, [r7, #10]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	4603      	mov	r3, r0
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fab6 	bl	8002b78 <I2C_RequestMemoryWrite>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d052      	beq.n	80026b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e081      	b.n	800271a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 fd00 	bl	8003020 <I2C_WaitOnTXEFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00d      	beq.n	8002642 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	2b04      	cmp	r3, #4
 800262c:	d107      	bne.n	800263e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e06b      	b.n	800271a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	781a      	ldrb	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	3b01      	subs	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b04      	cmp	r3, #4
 800267e:	d11b      	bne.n	80026b8 <HAL_I2C_Mem_Write+0x180>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	2b00      	cmp	r3, #0
 8002686:	d017      	beq.n	80026b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1aa      	bne.n	8002616 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 fcec 	bl	80030a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00d      	beq.n	80026ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d107      	bne.n	80026e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e016      	b.n	800271a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	e000      	b.n	800271a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002718:	2302      	movs	r3, #2
  }
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	00100002 	.word	0x00100002
 8002728:	ffff0000 	.word	0xffff0000

0800272c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08c      	sub	sp, #48	; 0x30
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	4608      	mov	r0, r1
 8002736:	4611      	mov	r1, r2
 8002738:	461a      	mov	r2, r3
 800273a:	4603      	mov	r3, r0
 800273c:	817b      	strh	r3, [r7, #10]
 800273e:	460b      	mov	r3, r1
 8002740:	813b      	strh	r3, [r7, #8]
 8002742:	4613      	mov	r3, r2
 8002744:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002746:	f7ff faef 	bl	8001d28 <HAL_GetTick>
 800274a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b20      	cmp	r3, #32
 8002756:	f040 8208 	bne.w	8002b6a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	2319      	movs	r3, #25
 8002760:	2201      	movs	r2, #1
 8002762:	497b      	ldr	r1, [pc, #492]	; (8002950 <HAL_I2C_Mem_Read+0x224>)
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 fb85 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002770:	2302      	movs	r3, #2
 8002772:	e1fb      	b.n	8002b6c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_I2C_Mem_Read+0x56>
 800277e:	2302      	movs	r3, #2
 8002780:	e1f4      	b.n	8002b6c <HAL_I2C_Mem_Read+0x440>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b01      	cmp	r3, #1
 8002796:	d007      	beq.n	80027a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2222      	movs	r2, #34	; 0x22
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2240      	movs	r2, #64	; 0x40
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80027d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4a5b      	ldr	r2, [pc, #364]	; (8002954 <HAL_I2C_Mem_Read+0x228>)
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ea:	88f8      	ldrh	r0, [r7, #6]
 80027ec:	893a      	ldrh	r2, [r7, #8]
 80027ee:	8979      	ldrh	r1, [r7, #10]
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	4603      	mov	r3, r0
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 fa52 	bl	8002ca4 <I2C_RequestMemoryRead>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e1b0      	b.n	8002b6c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	2b00      	cmp	r3, #0
 8002810:	d113      	bne.n	800283a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002812:	2300      	movs	r3, #0
 8002814:	623b      	str	r3, [r7, #32]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	623b      	str	r3, [r7, #32]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	623b      	str	r3, [r7, #32]
 8002826:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	e184      	b.n	8002b44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283e:	2b01      	cmp	r3, #1
 8002840:	d11b      	bne.n	800287a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002850:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	e164      	b.n	8002b44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287e:	2b02      	cmp	r3, #2
 8002880:	d11b      	bne.n	80028ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002890:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	61bb      	str	r3, [r7, #24]
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	e144      	b.n	8002b44 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80028d0:	e138      	b.n	8002b44 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	f200 80f1 	bhi.w	8002abe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d123      	bne.n	800292c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 fc1b 	bl	8003124 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e139      	b.n	8002b6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	855a      	strh	r2, [r3, #42]	; 0x2a
 800292a:	e10b      	b.n	8002b44 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002930:	2b02      	cmp	r3, #2
 8002932:	d14e      	bne.n	80029d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293a:	2200      	movs	r2, #0
 800293c:	4906      	ldr	r1, [pc, #24]	; (8002958 <HAL_I2C_Mem_Read+0x22c>)
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fa98 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d008      	beq.n	800295c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e10e      	b.n	8002b6c <HAL_I2C_Mem_Read+0x440>
 800294e:	bf00      	nop
 8002950:	00100002 	.word	0x00100002
 8002954:	ffff0000 	.word	0xffff0000
 8002958:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800296a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029d0:	e0b8      	b.n	8002b44 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d8:	2200      	movs	r2, #0
 80029da:	4966      	ldr	r1, [pc, #408]	; (8002b74 <HAL_I2C_Mem_Read+0x448>)
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fa49 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0bf      	b.n	8002b6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a34:	2200      	movs	r2, #0
 8002a36:	494f      	ldr	r1, [pc, #316]	; (8002b74 <HAL_I2C_Mem_Read+0x448>)
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 fa1b 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e091      	b.n	8002b6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002abc:	e042      	b.n	8002b44 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 fb2e 	bl	8003124 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e04c      	b.n	8002b6c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d118      	bne.n	8002b44 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f47f aec2 	bne.w	80028d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002b6a:	2302      	movs	r3, #2
  }
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3728      	adds	r7, #40	; 0x28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	00010004 	.word	0x00010004

08002b78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	4608      	mov	r0, r1
 8002b82:	4611      	mov	r1, r2
 8002b84:	461a      	mov	r2, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	817b      	strh	r3, [r7, #10]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	813b      	strh	r3, [r7, #8]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 f960 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00d      	beq.n	8002bd6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc8:	d103      	bne.n	8002bd2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e05f      	b.n	8002c96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bd6:	897b      	ldrh	r3, [r7, #10]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002be4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	6a3a      	ldr	r2, [r7, #32]
 8002bea:	492d      	ldr	r1, [pc, #180]	; (8002ca0 <I2C_RequestMemoryWrite+0x128>)
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f998 	bl	8002f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e04c      	b.n	8002c96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c14:	6a39      	ldr	r1, [r7, #32]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fa02 	bl	8003020 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d107      	bne.n	8002c3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e02b      	b.n	8002c96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d105      	bne.n	8002c50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c44:	893b      	ldrh	r3, [r7, #8]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	611a      	str	r2, [r3, #16]
 8002c4e:	e021      	b.n	8002c94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c50:	893b      	ldrh	r3, [r7, #8]
 8002c52:	0a1b      	lsrs	r3, r3, #8
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c60:	6a39      	ldr	r1, [r7, #32]
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f9dc 	bl	8003020 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00d      	beq.n	8002c8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d107      	bne.n	8002c86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e005      	b.n	8002c96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c8a:	893b      	ldrh	r3, [r7, #8]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	00010002 	.word	0x00010002

08002ca4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	4608      	mov	r0, r1
 8002cae:	4611      	mov	r1, r2
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	817b      	strh	r3, [r7, #10]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	813b      	strh	r3, [r7, #8]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ccc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f8c2 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00d      	beq.n	8002d12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d04:	d103      	bne.n	8002d0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e0aa      	b.n	8002e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d12:	897b      	ldrh	r3, [r7, #10]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	6a3a      	ldr	r2, [r7, #32]
 8002d26:	4952      	ldr	r1, [pc, #328]	; (8002e70 <I2C_RequestMemoryRead+0x1cc>)
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f8fa 	bl	8002f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e097      	b.n	8002e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d50:	6a39      	ldr	r1, [r7, #32]
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f964 	bl	8003020 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00d      	beq.n	8002d7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d107      	bne.n	8002d76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e076      	b.n	8002e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d105      	bne.n	8002d8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d80:	893b      	ldrh	r3, [r7, #8]
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	611a      	str	r2, [r3, #16]
 8002d8a:	e021      	b.n	8002dd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d8c:	893b      	ldrh	r3, [r7, #8]
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9c:	6a39      	ldr	r1, [r7, #32]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 f93e 	bl	8003020 <I2C_WaitOnTXEFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00d      	beq.n	8002dc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d107      	bne.n	8002dc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e050      	b.n	8002e68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dc6:	893b      	ldrh	r3, [r7, #8]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd2:	6a39      	ldr	r1, [r7, #32]
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f923 	bl	8003020 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00d      	beq.n	8002dfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d107      	bne.n	8002df8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e035      	b.n	8002e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f82b 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00d      	beq.n	8002e40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e32:	d103      	bne.n	8002e3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e013      	b.n	8002e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e40:	897b      	ldrh	r3, [r7, #10]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	6a3a      	ldr	r2, [r7, #32]
 8002e54:	4906      	ldr	r1, [pc, #24]	; (8002e70 <I2C_RequestMemoryRead+0x1cc>)
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f863 	bl	8002f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	00010002 	.word	0x00010002

08002e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e84:	e025      	b.n	8002ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d021      	beq.n	8002ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7fe ff4b 	bl	8001d28 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d116      	bne.n	8002ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f043 0220 	orr.w	r2, r3, #32
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e023      	b.n	8002f1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	0c1b      	lsrs	r3, r3, #16
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d10d      	bne.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	43da      	mvns	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	bf0c      	ite	eq
 8002eee:	2301      	moveq	r3, #1
 8002ef0:	2300      	movne	r3, #0
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	e00c      	b.n	8002f12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	43da      	mvns	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4013      	ands	r3, r2
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	bf0c      	ite	eq
 8002f0a:	2301      	moveq	r3, #1
 8002f0c:	2300      	movne	r3, #0
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d0b6      	beq.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b084      	sub	sp, #16
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f30:	e051      	b.n	8002fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f40:	d123      	bne.n	8002f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f043 0204 	orr.w	r2, r3, #4
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e046      	b.n	8003018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d021      	beq.n	8002fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f92:	f7fe fec9 	bl	8001d28 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d302      	bcc.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d116      	bne.n	8002fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f043 0220 	orr.w	r2, r3, #32
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e020      	b.n	8003018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	0c1b      	lsrs	r3, r3, #16
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d10c      	bne.n	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4013      	ands	r3, r2
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	bf14      	ite	ne
 8002ff2:	2301      	movne	r3, #1
 8002ff4:	2300      	moveq	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	e00b      	b.n	8003012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	43da      	mvns	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	4013      	ands	r3, r2
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf14      	ite	ne
 800300c:	2301      	movne	r3, #1
 800300e:	2300      	moveq	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d18d      	bne.n	8002f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800302c:	e02d      	b.n	800308a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f8ce 	bl	80031d0 <I2C_IsAcknowledgeFailed>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e02d      	b.n	800309a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d021      	beq.n	800308a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003046:	f7fe fe6f 	bl	8001d28 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	429a      	cmp	r2, r3
 8003054:	d302      	bcc.n	800305c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d116      	bne.n	800308a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f043 0220 	orr.w	r2, r3, #32
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e007      	b.n	800309a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003094:	2b80      	cmp	r3, #128	; 0x80
 8003096:	d1ca      	bne.n	800302e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030ae:	e02d      	b.n	800310c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f88d 	bl	80031d0 <I2C_IsAcknowledgeFailed>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e02d      	b.n	800311c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c6:	d021      	beq.n	800310c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c8:	f7fe fe2e 	bl	8001d28 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d302      	bcc.n	80030de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d116      	bne.n	800310c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f043 0220 	orr.w	r2, r3, #32
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e007      	b.n	800311c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b04      	cmp	r3, #4
 8003118:	d1ca      	bne.n	80030b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003130:	e042      	b.n	80031b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b10      	cmp	r3, #16
 800313e:	d119      	bne.n	8003174 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0210 	mvn.w	r2, #16
 8003148:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e029      	b.n	80031c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003174:	f7fe fdd8 	bl	8001d28 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	429a      	cmp	r2, r3
 8003182:	d302      	bcc.n	800318a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d116      	bne.n	80031b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f043 0220 	orr.w	r2, r3, #32
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e007      	b.n	80031c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b40      	cmp	r3, #64	; 0x40
 80031c4:	d1b5      	bne.n	8003132 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e6:	d11b      	bne.n	8003220 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f043 0204 	orr.w	r2, r3, #4
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0cc      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003244:	4b68      	ldr	r3, [pc, #416]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d90c      	bls.n	800326c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003252:	4b65      	ldr	r3, [pc, #404]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b63      	ldr	r3, [pc, #396]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0b8      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d020      	beq.n	80032ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003284:	4b59      	ldr	r3, [pc, #356]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	4a58      	ldr	r2, [pc, #352]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800328e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800329c:	4b53      	ldr	r3, [pc, #332]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4a52      	ldr	r2, [pc, #328]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a8:	4b50      	ldr	r3, [pc, #320]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	494d      	ldr	r1, [pc, #308]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d044      	beq.n	8003350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d107      	bne.n	80032de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ce:	4b47      	ldr	r3, [pc, #284]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d119      	bne.n	800330e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e07f      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d003      	beq.n	80032ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ee:	4b3f      	ldr	r3, [pc, #252]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e06f      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fe:	4b3b      	ldr	r3, [pc, #236]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e067      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800330e:	4b37      	ldr	r3, [pc, #220]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f023 0203 	bic.w	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4934      	ldr	r1, [pc, #208]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	4313      	orrs	r3, r2
 800331e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003320:	f7fe fd02 	bl	8001d28 <HAL_GetTick>
 8003324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003326:	e00a      	b.n	800333e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003328:	f7fe fcfe 	bl	8001d28 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	; 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e04f      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333e:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 020c 	and.w	r2, r3, #12
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	429a      	cmp	r2, r3
 800334e:	d1eb      	bne.n	8003328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003350:	4b25      	ldr	r3, [pc, #148]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d20c      	bcs.n	8003378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e032      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003384:	4b19      	ldr	r3, [pc, #100]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4916      	ldr	r1, [pc, #88]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d009      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a2:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	490e      	ldr	r1, [pc, #56]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033b6:	f000 f855 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 80033ba:	4602      	mov	r2, r0
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	490a      	ldr	r1, [pc, #40]	; (80033f0 <HAL_RCC_ClockConfig+0x1c0>)
 80033c8:	5ccb      	ldrb	r3, [r1, r3]
 80033ca:	fa22 f303 	lsr.w	r3, r2, r3
 80033ce:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_RCC_ClockConfig+0x1c8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fc62 	bl	8001ca0 <HAL_InitTick>

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023c00 	.word	0x40023c00
 80033ec:	40023800 	.word	0x40023800
 80033f0:	0800523c 	.word	0x0800523c
 80033f4:	20000000 	.word	0x20000000
 80033f8:	20000004 	.word	0x20000004

080033fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <HAL_RCC_GetHCLKFreq+0x14>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	20000000 	.word	0x20000000

08003414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003418:	f7ff fff0 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 800341c:	4602      	mov	r2, r0
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	0a9b      	lsrs	r3, r3, #10
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	4903      	ldr	r1, [pc, #12]	; (8003438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003430:	4618      	mov	r0, r3
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40023800 	.word	0x40023800
 8003438:	0800524c 	.word	0x0800524c

0800343c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003440:	f7ff ffdc 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0b5b      	lsrs	r3, r3, #13
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4903      	ldr	r1, [pc, #12]	; (8003460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003452:	5ccb      	ldrb	r3, [r1, r3]
 8003454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003458:	4618      	mov	r0, r3
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40023800 	.word	0x40023800
 8003460:	0800524c 	.word	0x0800524c

08003464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003468:	b0ae      	sub	sp, #184	; 0xb8
 800346a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800348a:	4bcb      	ldr	r3, [pc, #812]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x354>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b0c      	cmp	r3, #12
 8003494:	f200 8206 	bhi.w	80038a4 <HAL_RCC_GetSysClockFreq+0x440>
 8003498:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	080034d5 	.word	0x080034d5
 80034a4:	080038a5 	.word	0x080038a5
 80034a8:	080038a5 	.word	0x080038a5
 80034ac:	080038a5 	.word	0x080038a5
 80034b0:	080034dd 	.word	0x080034dd
 80034b4:	080038a5 	.word	0x080038a5
 80034b8:	080038a5 	.word	0x080038a5
 80034bc:	080038a5 	.word	0x080038a5
 80034c0:	080034e5 	.word	0x080034e5
 80034c4:	080038a5 	.word	0x080038a5
 80034c8:	080038a5 	.word	0x080038a5
 80034cc:	080038a5 	.word	0x080038a5
 80034d0:	080036d5 	.word	0x080036d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034d4:	4bb9      	ldr	r3, [pc, #740]	; (80037bc <HAL_RCC_GetSysClockFreq+0x358>)
 80034d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80034da:	e1e7      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034dc:	4bb8      	ldr	r3, [pc, #736]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80034de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80034e2:	e1e3      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e4:	4bb4      	ldr	r3, [pc, #720]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034f0:	4bb1      	ldr	r3, [pc, #708]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d071      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fc:	4bae      	ldr	r3, [pc, #696]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	099b      	lsrs	r3, r3, #6
 8003502:	2200      	movs	r2, #0
 8003504:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003508:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800350c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003514:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003518:	2300      	movs	r3, #0
 800351a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800351e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003522:	4622      	mov	r2, r4
 8003524:	462b      	mov	r3, r5
 8003526:	f04f 0000 	mov.w	r0, #0
 800352a:	f04f 0100 	mov.w	r1, #0
 800352e:	0159      	lsls	r1, r3, #5
 8003530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003534:	0150      	lsls	r0, r2, #5
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4621      	mov	r1, r4
 800353c:	1a51      	subs	r1, r2, r1
 800353e:	6439      	str	r1, [r7, #64]	; 0x40
 8003540:	4629      	mov	r1, r5
 8003542:	eb63 0301 	sbc.w	r3, r3, r1
 8003546:	647b      	str	r3, [r7, #68]	; 0x44
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003554:	4649      	mov	r1, r9
 8003556:	018b      	lsls	r3, r1, #6
 8003558:	4641      	mov	r1, r8
 800355a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800355e:	4641      	mov	r1, r8
 8003560:	018a      	lsls	r2, r1, #6
 8003562:	4641      	mov	r1, r8
 8003564:	1a51      	subs	r1, r2, r1
 8003566:	63b9      	str	r1, [r7, #56]	; 0x38
 8003568:	4649      	mov	r1, r9
 800356a:	eb63 0301 	sbc.w	r3, r3, r1
 800356e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800357c:	4649      	mov	r1, r9
 800357e:	00cb      	lsls	r3, r1, #3
 8003580:	4641      	mov	r1, r8
 8003582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003586:	4641      	mov	r1, r8
 8003588:	00ca      	lsls	r2, r1, #3
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	4603      	mov	r3, r0
 8003590:	4622      	mov	r2, r4
 8003592:	189b      	adds	r3, r3, r2
 8003594:	633b      	str	r3, [r7, #48]	; 0x30
 8003596:	462b      	mov	r3, r5
 8003598:	460a      	mov	r2, r1
 800359a:	eb42 0303 	adc.w	r3, r2, r3
 800359e:	637b      	str	r3, [r7, #52]	; 0x34
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035ac:	4629      	mov	r1, r5
 80035ae:	024b      	lsls	r3, r1, #9
 80035b0:	4621      	mov	r1, r4
 80035b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035b6:	4621      	mov	r1, r4
 80035b8:	024a      	lsls	r2, r1, #9
 80035ba:	4610      	mov	r0, r2
 80035bc:	4619      	mov	r1, r3
 80035be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80035d0:	f7fd fb1e 	bl	8000c10 <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4613      	mov	r3, r2
 80035da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035de:	e067      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e0:	4b75      	ldr	r3, [pc, #468]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	099b      	lsrs	r3, r3, #6
 80035e6:	2200      	movs	r2, #0
 80035e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035ec:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80035f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80035fa:	2300      	movs	r3, #0
 80035fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035fe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003602:	4622      	mov	r2, r4
 8003604:	462b      	mov	r3, r5
 8003606:	f04f 0000 	mov.w	r0, #0
 800360a:	f04f 0100 	mov.w	r1, #0
 800360e:	0159      	lsls	r1, r3, #5
 8003610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003614:	0150      	lsls	r0, r2, #5
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4621      	mov	r1, r4
 800361c:	1a51      	subs	r1, r2, r1
 800361e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003620:	4629      	mov	r1, r5
 8003622:	eb63 0301 	sbc.w	r3, r3, r1
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003634:	4649      	mov	r1, r9
 8003636:	018b      	lsls	r3, r1, #6
 8003638:	4641      	mov	r1, r8
 800363a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800363e:	4641      	mov	r1, r8
 8003640:	018a      	lsls	r2, r1, #6
 8003642:	4641      	mov	r1, r8
 8003644:	ebb2 0a01 	subs.w	sl, r2, r1
 8003648:	4649      	mov	r1, r9
 800364a:	eb63 0b01 	sbc.w	fp, r3, r1
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800365a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800365e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003662:	4692      	mov	sl, r2
 8003664:	469b      	mov	fp, r3
 8003666:	4623      	mov	r3, r4
 8003668:	eb1a 0303 	adds.w	r3, sl, r3
 800366c:	623b      	str	r3, [r7, #32]
 800366e:	462b      	mov	r3, r5
 8003670:	eb4b 0303 	adc.w	r3, fp, r3
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003682:	4629      	mov	r1, r5
 8003684:	028b      	lsls	r3, r1, #10
 8003686:	4621      	mov	r1, r4
 8003688:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800368c:	4621      	mov	r1, r4
 800368e:	028a      	lsls	r2, r1, #10
 8003690:	4610      	mov	r0, r2
 8003692:	4619      	mov	r1, r3
 8003694:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003698:	2200      	movs	r2, #0
 800369a:	673b      	str	r3, [r7, #112]	; 0x70
 800369c:	677a      	str	r2, [r7, #116]	; 0x74
 800369e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80036a2:	f7fd fab5 	bl	8000c10 <__aeabi_uldivmod>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4613      	mov	r3, r2
 80036ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036b0:	4b41      	ldr	r3, [pc, #260]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	3301      	adds	r3, #1
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80036c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036d2:	e0eb      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036d4:	4b38      	ldr	r3, [pc, #224]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036e0:	4b35      	ldr	r3, [pc, #212]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d06b      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ec:	4b32      	ldr	r3, [pc, #200]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	099b      	lsrs	r3, r3, #6
 80036f2:	2200      	movs	r2, #0
 80036f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80036f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036fe:	663b      	str	r3, [r7, #96]	; 0x60
 8003700:	2300      	movs	r3, #0
 8003702:	667b      	str	r3, [r7, #100]	; 0x64
 8003704:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003708:	4622      	mov	r2, r4
 800370a:	462b      	mov	r3, r5
 800370c:	f04f 0000 	mov.w	r0, #0
 8003710:	f04f 0100 	mov.w	r1, #0
 8003714:	0159      	lsls	r1, r3, #5
 8003716:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800371a:	0150      	lsls	r0, r2, #5
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4621      	mov	r1, r4
 8003722:	1a51      	subs	r1, r2, r1
 8003724:	61b9      	str	r1, [r7, #24]
 8003726:	4629      	mov	r1, r5
 8003728:	eb63 0301 	sbc.w	r3, r3, r1
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800373a:	4659      	mov	r1, fp
 800373c:	018b      	lsls	r3, r1, #6
 800373e:	4651      	mov	r1, sl
 8003740:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003744:	4651      	mov	r1, sl
 8003746:	018a      	lsls	r2, r1, #6
 8003748:	4651      	mov	r1, sl
 800374a:	ebb2 0801 	subs.w	r8, r2, r1
 800374e:	4659      	mov	r1, fp
 8003750:	eb63 0901 	sbc.w	r9, r3, r1
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003760:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003764:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003768:	4690      	mov	r8, r2
 800376a:	4699      	mov	r9, r3
 800376c:	4623      	mov	r3, r4
 800376e:	eb18 0303 	adds.w	r3, r8, r3
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	462b      	mov	r3, r5
 8003776:	eb49 0303 	adc.w	r3, r9, r3
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003788:	4629      	mov	r1, r5
 800378a:	024b      	lsls	r3, r1, #9
 800378c:	4621      	mov	r1, r4
 800378e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003792:	4621      	mov	r1, r4
 8003794:	024a      	lsls	r2, r1, #9
 8003796:	4610      	mov	r0, r2
 8003798:	4619      	mov	r1, r3
 800379a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800379e:	2200      	movs	r2, #0
 80037a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80037a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80037a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037a8:	f7fd fa32 	bl	8000c10 <__aeabi_uldivmod>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4613      	mov	r3, r2
 80037b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037b6:	e065      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0x420>
 80037b8:	40023800 	.word	0x40023800
 80037bc:	00f42400 	.word	0x00f42400
 80037c0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c4:	4b3d      	ldr	r3, [pc, #244]	; (80038bc <HAL_RCC_GetSysClockFreq+0x458>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	099b      	lsrs	r3, r3, #6
 80037ca:	2200      	movs	r2, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	4611      	mov	r1, r2
 80037d0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037d4:	653b      	str	r3, [r7, #80]	; 0x50
 80037d6:	2300      	movs	r3, #0
 80037d8:	657b      	str	r3, [r7, #84]	; 0x54
 80037da:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80037de:	4642      	mov	r2, r8
 80037e0:	464b      	mov	r3, r9
 80037e2:	f04f 0000 	mov.w	r0, #0
 80037e6:	f04f 0100 	mov.w	r1, #0
 80037ea:	0159      	lsls	r1, r3, #5
 80037ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037f0:	0150      	lsls	r0, r2, #5
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4641      	mov	r1, r8
 80037f8:	1a51      	subs	r1, r2, r1
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	4649      	mov	r1, r9
 80037fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003810:	4659      	mov	r1, fp
 8003812:	018b      	lsls	r3, r1, #6
 8003814:	4651      	mov	r1, sl
 8003816:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800381a:	4651      	mov	r1, sl
 800381c:	018a      	lsls	r2, r1, #6
 800381e:	4651      	mov	r1, sl
 8003820:	1a54      	subs	r4, r2, r1
 8003822:	4659      	mov	r1, fp
 8003824:	eb63 0501 	sbc.w	r5, r3, r1
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	00eb      	lsls	r3, r5, #3
 8003832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003836:	00e2      	lsls	r2, r4, #3
 8003838:	4614      	mov	r4, r2
 800383a:	461d      	mov	r5, r3
 800383c:	4643      	mov	r3, r8
 800383e:	18e3      	adds	r3, r4, r3
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	464b      	mov	r3, r9
 8003844:	eb45 0303 	adc.w	r3, r5, r3
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003856:	4629      	mov	r1, r5
 8003858:	028b      	lsls	r3, r1, #10
 800385a:	4621      	mov	r1, r4
 800385c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003860:	4621      	mov	r1, r4
 8003862:	028a      	lsls	r2, r1, #10
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800386c:	2200      	movs	r2, #0
 800386e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003870:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003872:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003876:	f7fd f9cb 	bl	8000c10 <__aeabi_uldivmod>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4613      	mov	r3, r2
 8003880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003884:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <HAL_RCC_GetSysClockFreq+0x458>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	0f1b      	lsrs	r3, r3, #28
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003892:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003896:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800389a:	fbb2 f3f3 	udiv	r3, r2, r3
 800389e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038a2:	e003      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80038a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	37b8      	adds	r7, #184	; 0xb8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800
 80038c0:	00f42400 	.word	0x00f42400

080038c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e28d      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 8083 	beq.w	80039ea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038e4:	4b94      	ldr	r3, [pc, #592]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 030c 	and.w	r3, r3, #12
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d019      	beq.n	8003924 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038f0:	4b91      	ldr	r3, [pc, #580]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d106      	bne.n	800390a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038fc:	4b8e      	ldr	r3, [pc, #568]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003908:	d00c      	beq.n	8003924 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800390a:	4b8b      	ldr	r3, [pc, #556]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003912:	2b0c      	cmp	r3, #12
 8003914:	d112      	bne.n	800393c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003916:	4b88      	ldr	r3, [pc, #544]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003922:	d10b      	bne.n	800393c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003924:	4b84      	ldr	r3, [pc, #528]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d05b      	beq.n	80039e8 <HAL_RCC_OscConfig+0x124>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d157      	bne.n	80039e8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e25a      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003944:	d106      	bne.n	8003954 <HAL_RCC_OscConfig+0x90>
 8003946:	4b7c      	ldr	r3, [pc, #496]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a7b      	ldr	r2, [pc, #492]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 800394c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e01d      	b.n	8003990 <HAL_RCC_OscConfig+0xcc>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800395c:	d10c      	bne.n	8003978 <HAL_RCC_OscConfig+0xb4>
 800395e:	4b76      	ldr	r3, [pc, #472]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a75      	ldr	r2, [pc, #468]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	4b73      	ldr	r3, [pc, #460]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a72      	ldr	r2, [pc, #456]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	e00b      	b.n	8003990 <HAL_RCC_OscConfig+0xcc>
 8003978:	4b6f      	ldr	r3, [pc, #444]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a6e      	ldr	r2, [pc, #440]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 800397e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	4b6c      	ldr	r3, [pc, #432]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a6b      	ldr	r2, [pc, #428]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 800398a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800398e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d013      	beq.n	80039c0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fe f9c6 	bl	8001d28 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a0:	f7fe f9c2 	bl	8001d28 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b64      	cmp	r3, #100	; 0x64
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e21f      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	4b61      	ldr	r3, [pc, #388]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0xdc>
 80039be:	e014      	b.n	80039ea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fe f9b2 	bl	8001d28 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c8:	f7fe f9ae 	bl	8001d28 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e20b      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039da:	4b57      	ldr	r3, [pc, #348]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x104>
 80039e6:	e000      	b.n	80039ea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d06f      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039f6:	4b50      	ldr	r3, [pc, #320]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d017      	beq.n	8003a32 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a02:	4b4d      	ldr	r3, [pc, #308]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d105      	bne.n	8003a1a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a0e:	4b4a      	ldr	r3, [pc, #296]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00b      	beq.n	8003a32 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a1a:	4b47      	ldr	r3, [pc, #284]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a22:	2b0c      	cmp	r3, #12
 8003a24:	d11c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a26:	4b44      	ldr	r3, [pc, #272]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d116      	bne.n	8003a60 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	4b41      	ldr	r3, [pc, #260]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_RCC_OscConfig+0x186>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d001      	beq.n	8003a4a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e1d3      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4a:	4b3b      	ldr	r3, [pc, #236]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4937      	ldr	r1, [pc, #220]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5e:	e03a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a68:	4b34      	ldr	r3, [pc, #208]	; (8003b3c <HAL_RCC_OscConfig+0x278>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6e:	f7fe f95b 	bl	8001d28 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a76:	f7fe f957 	bl	8001d28 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e1b4      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a88:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a94:	4b28      	ldr	r3, [pc, #160]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4925      	ldr	r1, [pc, #148]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]
 8003aa8:	e015      	b.n	8003ad6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aaa:	4b24      	ldr	r3, [pc, #144]	; (8003b3c <HAL_RCC_OscConfig+0x278>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fe f93a 	bl	8001d28 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab8:	f7fe f936 	bl	8001d28 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e193      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aca:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d036      	beq.n	8003b50 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aea:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7fe f91a 	bl	8001d28 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af8:	f7fe f916 	bl	8001d28 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e173      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0a:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x234>
 8003b16:	e01b      	b.n	8003b50 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1e:	f7fe f903 	bl	8001d28 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b24:	e00e      	b.n	8003b44 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b26:	f7fe f8ff 	bl	8001d28 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d907      	bls.n	8003b44 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e15c      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	42470000 	.word	0x42470000
 8003b40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b44:	4b8a      	ldr	r3, [pc, #552]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1ea      	bne.n	8003b26 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8097 	beq.w	8003c8c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b62:	4b83      	ldr	r3, [pc, #524]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10f      	bne.n	8003b8e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	4b7f      	ldr	r3, [pc, #508]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	4a7e      	ldr	r2, [pc, #504]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7e:	4b7c      	ldr	r3, [pc, #496]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8e:	4b79      	ldr	r3, [pc, #484]	; (8003d74 <HAL_RCC_OscConfig+0x4b0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d118      	bne.n	8003bcc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b9a:	4b76      	ldr	r3, [pc, #472]	; (8003d74 <HAL_RCC_OscConfig+0x4b0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a75      	ldr	r2, [pc, #468]	; (8003d74 <HAL_RCC_OscConfig+0x4b0>)
 8003ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba6:	f7fe f8bf 	bl	8001d28 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bae:	f7fe f8bb 	bl	8001d28 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e118      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc0:	4b6c      	ldr	r3, [pc, #432]	; (8003d74 <HAL_RCC_OscConfig+0x4b0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f0      	beq.n	8003bae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d106      	bne.n	8003be2 <HAL_RCC_OscConfig+0x31e>
 8003bd4:	4b66      	ldr	r3, [pc, #408]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a65      	ldr	r2, [pc, #404]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
 8003be0:	e01c      	b.n	8003c1c <HAL_RCC_OscConfig+0x358>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b05      	cmp	r3, #5
 8003be8:	d10c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x340>
 8003bea:	4b61      	ldr	r3, [pc, #388]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	4a60      	ldr	r2, [pc, #384]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003bf0:	f043 0304 	orr.w	r3, r3, #4
 8003bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf6:	4b5e      	ldr	r3, [pc, #376]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	4a5d      	ldr	r2, [pc, #372]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6713      	str	r3, [r2, #112]	; 0x70
 8003c02:	e00b      	b.n	8003c1c <HAL_RCC_OscConfig+0x358>
 8003c04:	4b5a      	ldr	r3, [pc, #360]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	4a59      	ldr	r2, [pc, #356]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c10:	4b57      	ldr	r3, [pc, #348]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	4a56      	ldr	r2, [pc, #344]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003c16:	f023 0304 	bic.w	r3, r3, #4
 8003c1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d015      	beq.n	8003c50 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7fe f880 	bl	8001d28 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c2c:	f7fe f87c 	bl	8001d28 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e0d7      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c42:	4b4b      	ldr	r3, [pc, #300]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0ee      	beq.n	8003c2c <HAL_RCC_OscConfig+0x368>
 8003c4e:	e014      	b.n	8003c7a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c50:	f7fe f86a 	bl	8001d28 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c56:	e00a      	b.n	8003c6e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c58:	f7fe f866 	bl	8001d28 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e0c1      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6e:	4b40      	ldr	r3, [pc, #256]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1ee      	bne.n	8003c58 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d105      	bne.n	8003c8c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c80:	4b3b      	ldr	r3, [pc, #236]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	4a3a      	ldr	r2, [pc, #232]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80ad 	beq.w	8003df0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c96:	4b36      	ldr	r3, [pc, #216]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d060      	beq.n	8003d64 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d145      	bne.n	8003d36 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003caa:	4b33      	ldr	r3, [pc, #204]	; (8003d78 <HAL_RCC_OscConfig+0x4b4>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fe f83a 	bl	8001d28 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb8:	f7fe f836 	bl	8001d28 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e093      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cca:	4b29      	ldr	r3, [pc, #164]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69da      	ldr	r2, [r3, #28]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	019b      	lsls	r3, r3, #6
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	085b      	lsrs	r3, r3, #1
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	041b      	lsls	r3, r3, #16
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	061b      	lsls	r3, r3, #24
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d00:	071b      	lsls	r3, r3, #28
 8003d02:	491b      	ldr	r1, [pc, #108]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d08:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <HAL_RCC_OscConfig+0x4b4>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0e:	f7fe f80b 	bl	8001d28 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d16:	f7fe f807 	bl	8001d28 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e064      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d28:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x452>
 8003d34:	e05c      	b.n	8003df0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <HAL_RCC_OscConfig+0x4b4>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fd fff4 	bl	8001d28 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d44:	f7fd fff0 	bl	8001d28 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e04d      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x480>
 8003d62:	e045      	b.n	8003df0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d107      	bne.n	8003d7c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e040      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
 8003d70:	40023800 	.word	0x40023800
 8003d74:	40007000 	.word	0x40007000
 8003d78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d7c:	4b1f      	ldr	r3, [pc, #124]	; (8003dfc <HAL_RCC_OscConfig+0x538>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d030      	beq.n	8003dec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d129      	bne.n	8003dec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d122      	bne.n	8003dec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dac:	4013      	ands	r3, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003db2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d119      	bne.n	8003dec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	085b      	lsrs	r3, r3, #1
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d10f      	bne.n	8003dec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d107      	bne.n	8003dec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40023800 	.word	0x40023800

08003e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e03f      	b.n	8003e92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fd fe6a 	bl	8001b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2224      	movs	r2, #36	; 0x24
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f829 	bl	8003e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695a      	ldr	r2, [r3, #20]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea0:	b0c0      	sub	sp, #256	; 0x100
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb8:	68d9      	ldr	r1, [r3, #12]
 8003eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	ea40 0301 	orr.w	r3, r0, r1
 8003ec4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ef4:	f021 010c 	bic.w	r1, r1, #12
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f02:	430b      	orrs	r3, r1
 8003f04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f16:	6999      	ldr	r1, [r3, #24]
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	ea40 0301 	orr.w	r3, r0, r1
 8003f22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4b8f      	ldr	r3, [pc, #572]	; (8004168 <UART_SetConfig+0x2cc>)
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d005      	beq.n	8003f3c <UART_SetConfig+0xa0>
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4b8d      	ldr	r3, [pc, #564]	; (800416c <UART_SetConfig+0x2d0>)
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d104      	bne.n	8003f46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f3c:	f7ff fa7e 	bl	800343c <HAL_RCC_GetPCLK2Freq>
 8003f40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f44:	e003      	b.n	8003f4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f46:	f7ff fa65 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 8003f4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f58:	f040 810c 	bne.w	8004174 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f60:	2200      	movs	r2, #0
 8003f62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f6e:	4622      	mov	r2, r4
 8003f70:	462b      	mov	r3, r5
 8003f72:	1891      	adds	r1, r2, r2
 8003f74:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f76:	415b      	adcs	r3, r3
 8003f78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f7e:	4621      	mov	r1, r4
 8003f80:	eb12 0801 	adds.w	r8, r2, r1
 8003f84:	4629      	mov	r1, r5
 8003f86:	eb43 0901 	adc.w	r9, r3, r1
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f9e:	4690      	mov	r8, r2
 8003fa0:	4699      	mov	r9, r3
 8003fa2:	4623      	mov	r3, r4
 8003fa4:	eb18 0303 	adds.w	r3, r8, r3
 8003fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fac:	462b      	mov	r3, r5
 8003fae:	eb49 0303 	adc.w	r3, r9, r3
 8003fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fca:	460b      	mov	r3, r1
 8003fcc:	18db      	adds	r3, r3, r3
 8003fce:	653b      	str	r3, [r7, #80]	; 0x50
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	eb42 0303 	adc.w	r3, r2, r3
 8003fd6:	657b      	str	r3, [r7, #84]	; 0x54
 8003fd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fe0:	f7fc fe16 	bl	8000c10 <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4b61      	ldr	r3, [pc, #388]	; (8004170 <UART_SetConfig+0x2d4>)
 8003fea:	fba3 2302 	umull	r2, r3, r3, r2
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	011c      	lsls	r4, r3, #4
 8003ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ffc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004000:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004004:	4642      	mov	r2, r8
 8004006:	464b      	mov	r3, r9
 8004008:	1891      	adds	r1, r2, r2
 800400a:	64b9      	str	r1, [r7, #72]	; 0x48
 800400c:	415b      	adcs	r3, r3
 800400e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004010:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004014:	4641      	mov	r1, r8
 8004016:	eb12 0a01 	adds.w	sl, r2, r1
 800401a:	4649      	mov	r1, r9
 800401c:	eb43 0b01 	adc.w	fp, r3, r1
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800402c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004034:	4692      	mov	sl, r2
 8004036:	469b      	mov	fp, r3
 8004038:	4643      	mov	r3, r8
 800403a:	eb1a 0303 	adds.w	r3, sl, r3
 800403e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004042:	464b      	mov	r3, r9
 8004044:	eb4b 0303 	adc.w	r3, fp, r3
 8004048:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004058:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800405c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004060:	460b      	mov	r3, r1
 8004062:	18db      	adds	r3, r3, r3
 8004064:	643b      	str	r3, [r7, #64]	; 0x40
 8004066:	4613      	mov	r3, r2
 8004068:	eb42 0303 	adc.w	r3, r2, r3
 800406c:	647b      	str	r3, [r7, #68]	; 0x44
 800406e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004072:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004076:	f7fc fdcb 	bl	8000c10 <__aeabi_uldivmod>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4611      	mov	r1, r2
 8004080:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <UART_SetConfig+0x2d4>)
 8004082:	fba3 2301 	umull	r2, r3, r3, r1
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	2264      	movs	r2, #100	; 0x64
 800408a:	fb02 f303 	mul.w	r3, r2, r3
 800408e:	1acb      	subs	r3, r1, r3
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004096:	4b36      	ldr	r3, [pc, #216]	; (8004170 <UART_SetConfig+0x2d4>)
 8004098:	fba3 2302 	umull	r2, r3, r3, r2
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040a4:	441c      	add	r4, r3
 80040a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040b8:	4642      	mov	r2, r8
 80040ba:	464b      	mov	r3, r9
 80040bc:	1891      	adds	r1, r2, r2
 80040be:	63b9      	str	r1, [r7, #56]	; 0x38
 80040c0:	415b      	adcs	r3, r3
 80040c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040c8:	4641      	mov	r1, r8
 80040ca:	1851      	adds	r1, r2, r1
 80040cc:	6339      	str	r1, [r7, #48]	; 0x30
 80040ce:	4649      	mov	r1, r9
 80040d0:	414b      	adcs	r3, r1
 80040d2:	637b      	str	r3, [r7, #52]	; 0x34
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040e0:	4659      	mov	r1, fp
 80040e2:	00cb      	lsls	r3, r1, #3
 80040e4:	4651      	mov	r1, sl
 80040e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ea:	4651      	mov	r1, sl
 80040ec:	00ca      	lsls	r2, r1, #3
 80040ee:	4610      	mov	r0, r2
 80040f0:	4619      	mov	r1, r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	4642      	mov	r2, r8
 80040f6:	189b      	adds	r3, r3, r2
 80040f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040fc:	464b      	mov	r3, r9
 80040fe:	460a      	mov	r2, r1
 8004100:	eb42 0303 	adc.w	r3, r2, r3
 8004104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004114:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004118:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800411c:	460b      	mov	r3, r1
 800411e:	18db      	adds	r3, r3, r3
 8004120:	62bb      	str	r3, [r7, #40]	; 0x28
 8004122:	4613      	mov	r3, r2
 8004124:	eb42 0303 	adc.w	r3, r2, r3
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800412a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800412e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004132:	f7fc fd6d 	bl	8000c10 <__aeabi_uldivmod>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <UART_SetConfig+0x2d4>)
 800413c:	fba3 1302 	umull	r1, r3, r3, r2
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	2164      	movs	r1, #100	; 0x64
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	3332      	adds	r3, #50	; 0x32
 800414e:	4a08      	ldr	r2, [pc, #32]	; (8004170 <UART_SetConfig+0x2d4>)
 8004150:	fba2 2303 	umull	r2, r3, r2, r3
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	f003 0207 	and.w	r2, r3, #7
 800415a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4422      	add	r2, r4
 8004162:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004164:	e105      	b.n	8004372 <UART_SetConfig+0x4d6>
 8004166:	bf00      	nop
 8004168:	40011000 	.word	0x40011000
 800416c:	40011400 	.word	0x40011400
 8004170:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004178:	2200      	movs	r2, #0
 800417a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800417e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004182:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004186:	4642      	mov	r2, r8
 8004188:	464b      	mov	r3, r9
 800418a:	1891      	adds	r1, r2, r2
 800418c:	6239      	str	r1, [r7, #32]
 800418e:	415b      	adcs	r3, r3
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
 8004192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004196:	4641      	mov	r1, r8
 8004198:	1854      	adds	r4, r2, r1
 800419a:	4649      	mov	r1, r9
 800419c:	eb43 0501 	adc.w	r5, r3, r1
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	00eb      	lsls	r3, r5, #3
 80041aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ae:	00e2      	lsls	r2, r4, #3
 80041b0:	4614      	mov	r4, r2
 80041b2:	461d      	mov	r5, r3
 80041b4:	4643      	mov	r3, r8
 80041b6:	18e3      	adds	r3, r4, r3
 80041b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041bc:	464b      	mov	r3, r9
 80041be:	eb45 0303 	adc.w	r3, r5, r3
 80041c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041e2:	4629      	mov	r1, r5
 80041e4:	008b      	lsls	r3, r1, #2
 80041e6:	4621      	mov	r1, r4
 80041e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ec:	4621      	mov	r1, r4
 80041ee:	008a      	lsls	r2, r1, #2
 80041f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041f4:	f7fc fd0c 	bl	8000c10 <__aeabi_uldivmod>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4b60      	ldr	r3, [pc, #384]	; (8004380 <UART_SetConfig+0x4e4>)
 80041fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	011c      	lsls	r4, r3, #4
 8004206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800420a:	2200      	movs	r2, #0
 800420c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004210:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004214:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004218:	4642      	mov	r2, r8
 800421a:	464b      	mov	r3, r9
 800421c:	1891      	adds	r1, r2, r2
 800421e:	61b9      	str	r1, [r7, #24]
 8004220:	415b      	adcs	r3, r3
 8004222:	61fb      	str	r3, [r7, #28]
 8004224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004228:	4641      	mov	r1, r8
 800422a:	1851      	adds	r1, r2, r1
 800422c:	6139      	str	r1, [r7, #16]
 800422e:	4649      	mov	r1, r9
 8004230:	414b      	adcs	r3, r1
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004240:	4659      	mov	r1, fp
 8004242:	00cb      	lsls	r3, r1, #3
 8004244:	4651      	mov	r1, sl
 8004246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800424a:	4651      	mov	r1, sl
 800424c:	00ca      	lsls	r2, r1, #3
 800424e:	4610      	mov	r0, r2
 8004250:	4619      	mov	r1, r3
 8004252:	4603      	mov	r3, r0
 8004254:	4642      	mov	r2, r8
 8004256:	189b      	adds	r3, r3, r2
 8004258:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800425c:	464b      	mov	r3, r9
 800425e:	460a      	mov	r2, r1
 8004260:	eb42 0303 	adc.w	r3, r2, r3
 8004264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	67bb      	str	r3, [r7, #120]	; 0x78
 8004272:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004280:	4649      	mov	r1, r9
 8004282:	008b      	lsls	r3, r1, #2
 8004284:	4641      	mov	r1, r8
 8004286:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800428a:	4641      	mov	r1, r8
 800428c:	008a      	lsls	r2, r1, #2
 800428e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004292:	f7fc fcbd 	bl	8000c10 <__aeabi_uldivmod>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4b39      	ldr	r3, [pc, #228]	; (8004380 <UART_SetConfig+0x4e4>)
 800429c:	fba3 1302 	umull	r1, r3, r3, r2
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	2164      	movs	r1, #100	; 0x64
 80042a4:	fb01 f303 	mul.w	r3, r1, r3
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	3332      	adds	r3, #50	; 0x32
 80042ae:	4a34      	ldr	r2, [pc, #208]	; (8004380 <UART_SetConfig+0x4e4>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ba:	441c      	add	r4, r3
 80042bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c0:	2200      	movs	r2, #0
 80042c2:	673b      	str	r3, [r7, #112]	; 0x70
 80042c4:	677a      	str	r2, [r7, #116]	; 0x74
 80042c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042ca:	4642      	mov	r2, r8
 80042cc:	464b      	mov	r3, r9
 80042ce:	1891      	adds	r1, r2, r2
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	415b      	adcs	r3, r3
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042da:	4641      	mov	r1, r8
 80042dc:	1851      	adds	r1, r2, r1
 80042de:	6039      	str	r1, [r7, #0]
 80042e0:	4649      	mov	r1, r9
 80042e2:	414b      	adcs	r3, r1
 80042e4:	607b      	str	r3, [r7, #4]
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042f2:	4659      	mov	r1, fp
 80042f4:	00cb      	lsls	r3, r1, #3
 80042f6:	4651      	mov	r1, sl
 80042f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042fc:	4651      	mov	r1, sl
 80042fe:	00ca      	lsls	r2, r1, #3
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	4603      	mov	r3, r0
 8004306:	4642      	mov	r2, r8
 8004308:	189b      	adds	r3, r3, r2
 800430a:	66bb      	str	r3, [r7, #104]	; 0x68
 800430c:	464b      	mov	r3, r9
 800430e:	460a      	mov	r2, r1
 8004310:	eb42 0303 	adc.w	r3, r2, r3
 8004314:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	663b      	str	r3, [r7, #96]	; 0x60
 8004320:	667a      	str	r2, [r7, #100]	; 0x64
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800432e:	4649      	mov	r1, r9
 8004330:	008b      	lsls	r3, r1, #2
 8004332:	4641      	mov	r1, r8
 8004334:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004338:	4641      	mov	r1, r8
 800433a:	008a      	lsls	r2, r1, #2
 800433c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004340:	f7fc fc66 	bl	8000c10 <__aeabi_uldivmod>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <UART_SetConfig+0x4e4>)
 800434a:	fba3 1302 	umull	r1, r3, r3, r2
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	2164      	movs	r1, #100	; 0x64
 8004352:	fb01 f303 	mul.w	r3, r1, r3
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	3332      	adds	r3, #50	; 0x32
 800435c:	4a08      	ldr	r2, [pc, #32]	; (8004380 <UART_SetConfig+0x4e4>)
 800435e:	fba2 2303 	umull	r2, r3, r2, r3
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	f003 020f 	and.w	r2, r3, #15
 8004368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4422      	add	r2, r4
 8004370:	609a      	str	r2, [r3, #8]
}
 8004372:	bf00      	nop
 8004374:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004378:	46bd      	mov	sp, r7
 800437a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800437e:	bf00      	nop
 8004380:	51eb851f 	.word	0x51eb851f

08004384 <__errno>:
 8004384:	4b01      	ldr	r3, [pc, #4]	; (800438c <__errno+0x8>)
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	2000000c 	.word	0x2000000c

08004390 <__libc_init_array>:
 8004390:	b570      	push	{r4, r5, r6, lr}
 8004392:	4d0d      	ldr	r5, [pc, #52]	; (80043c8 <__libc_init_array+0x38>)
 8004394:	4c0d      	ldr	r4, [pc, #52]	; (80043cc <__libc_init_array+0x3c>)
 8004396:	1b64      	subs	r4, r4, r5
 8004398:	10a4      	asrs	r4, r4, #2
 800439a:	2600      	movs	r6, #0
 800439c:	42a6      	cmp	r6, r4
 800439e:	d109      	bne.n	80043b4 <__libc_init_array+0x24>
 80043a0:	4d0b      	ldr	r5, [pc, #44]	; (80043d0 <__libc_init_array+0x40>)
 80043a2:	4c0c      	ldr	r4, [pc, #48]	; (80043d4 <__libc_init_array+0x44>)
 80043a4:	f000 ff3a 	bl	800521c <_init>
 80043a8:	1b64      	subs	r4, r4, r5
 80043aa:	10a4      	asrs	r4, r4, #2
 80043ac:	2600      	movs	r6, #0
 80043ae:	42a6      	cmp	r6, r4
 80043b0:	d105      	bne.n	80043be <__libc_init_array+0x2e>
 80043b2:	bd70      	pop	{r4, r5, r6, pc}
 80043b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b8:	4798      	blx	r3
 80043ba:	3601      	adds	r6, #1
 80043bc:	e7ee      	b.n	800439c <__libc_init_array+0xc>
 80043be:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c2:	4798      	blx	r3
 80043c4:	3601      	adds	r6, #1
 80043c6:	e7f2      	b.n	80043ae <__libc_init_array+0x1e>
 80043c8:	08005290 	.word	0x08005290
 80043cc:	08005290 	.word	0x08005290
 80043d0:	08005290 	.word	0x08005290
 80043d4:	08005294 	.word	0x08005294

080043d8 <memset>:
 80043d8:	4402      	add	r2, r0
 80043da:	4603      	mov	r3, r0
 80043dc:	4293      	cmp	r3, r2
 80043de:	d100      	bne.n	80043e2 <memset+0xa>
 80043e0:	4770      	bx	lr
 80043e2:	f803 1b01 	strb.w	r1, [r3], #1
 80043e6:	e7f9      	b.n	80043dc <memset+0x4>

080043e8 <pow>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	ed2d 8b02 	vpush	{d8}
 80043ee:	eeb0 8a40 	vmov.f32	s16, s0
 80043f2:	eef0 8a60 	vmov.f32	s17, s1
 80043f6:	ec55 4b11 	vmov	r4, r5, d1
 80043fa:	f000 f865 	bl	80044c8 <__ieee754_pow>
 80043fe:	4622      	mov	r2, r4
 8004400:	462b      	mov	r3, r5
 8004402:	4620      	mov	r0, r4
 8004404:	4629      	mov	r1, r5
 8004406:	ec57 6b10 	vmov	r6, r7, d0
 800440a:	f7fc fb53 	bl	8000ab4 <__aeabi_dcmpun>
 800440e:	2800      	cmp	r0, #0
 8004410:	d13b      	bne.n	800448a <pow+0xa2>
 8004412:	ec51 0b18 	vmov	r0, r1, d8
 8004416:	2200      	movs	r2, #0
 8004418:	2300      	movs	r3, #0
 800441a:	f7fc fb19 	bl	8000a50 <__aeabi_dcmpeq>
 800441e:	b1b8      	cbz	r0, 8004450 <pow+0x68>
 8004420:	2200      	movs	r2, #0
 8004422:	2300      	movs	r3, #0
 8004424:	4620      	mov	r0, r4
 8004426:	4629      	mov	r1, r5
 8004428:	f7fc fb12 	bl	8000a50 <__aeabi_dcmpeq>
 800442c:	2800      	cmp	r0, #0
 800442e:	d146      	bne.n	80044be <pow+0xd6>
 8004430:	ec45 4b10 	vmov	d0, r4, r5
 8004434:	f000 fe61 	bl	80050fa <finite>
 8004438:	b338      	cbz	r0, 800448a <pow+0xa2>
 800443a:	2200      	movs	r2, #0
 800443c:	2300      	movs	r3, #0
 800443e:	4620      	mov	r0, r4
 8004440:	4629      	mov	r1, r5
 8004442:	f7fc fb0f 	bl	8000a64 <__aeabi_dcmplt>
 8004446:	b300      	cbz	r0, 800448a <pow+0xa2>
 8004448:	f7ff ff9c 	bl	8004384 <__errno>
 800444c:	2322      	movs	r3, #34	; 0x22
 800444e:	e01b      	b.n	8004488 <pow+0xa0>
 8004450:	ec47 6b10 	vmov	d0, r6, r7
 8004454:	f000 fe51 	bl	80050fa <finite>
 8004458:	b9e0      	cbnz	r0, 8004494 <pow+0xac>
 800445a:	eeb0 0a48 	vmov.f32	s0, s16
 800445e:	eef0 0a68 	vmov.f32	s1, s17
 8004462:	f000 fe4a 	bl	80050fa <finite>
 8004466:	b1a8      	cbz	r0, 8004494 <pow+0xac>
 8004468:	ec45 4b10 	vmov	d0, r4, r5
 800446c:	f000 fe45 	bl	80050fa <finite>
 8004470:	b180      	cbz	r0, 8004494 <pow+0xac>
 8004472:	4632      	mov	r2, r6
 8004474:	463b      	mov	r3, r7
 8004476:	4630      	mov	r0, r6
 8004478:	4639      	mov	r1, r7
 800447a:	f7fc fb1b 	bl	8000ab4 <__aeabi_dcmpun>
 800447e:	2800      	cmp	r0, #0
 8004480:	d0e2      	beq.n	8004448 <pow+0x60>
 8004482:	f7ff ff7f 	bl	8004384 <__errno>
 8004486:	2321      	movs	r3, #33	; 0x21
 8004488:	6003      	str	r3, [r0, #0]
 800448a:	ecbd 8b02 	vpop	{d8}
 800448e:	ec47 6b10 	vmov	d0, r6, r7
 8004492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004494:	2200      	movs	r2, #0
 8004496:	2300      	movs	r3, #0
 8004498:	4630      	mov	r0, r6
 800449a:	4639      	mov	r1, r7
 800449c:	f7fc fad8 	bl	8000a50 <__aeabi_dcmpeq>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d0f2      	beq.n	800448a <pow+0xa2>
 80044a4:	eeb0 0a48 	vmov.f32	s0, s16
 80044a8:	eef0 0a68 	vmov.f32	s1, s17
 80044ac:	f000 fe25 	bl	80050fa <finite>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d0ea      	beq.n	800448a <pow+0xa2>
 80044b4:	ec45 4b10 	vmov	d0, r4, r5
 80044b8:	f000 fe1f 	bl	80050fa <finite>
 80044bc:	e7c3      	b.n	8004446 <pow+0x5e>
 80044be:	4f01      	ldr	r7, [pc, #4]	; (80044c4 <pow+0xdc>)
 80044c0:	2600      	movs	r6, #0
 80044c2:	e7e2      	b.n	800448a <pow+0xa2>
 80044c4:	3ff00000 	.word	0x3ff00000

080044c8 <__ieee754_pow>:
 80044c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044cc:	ed2d 8b06 	vpush	{d8-d10}
 80044d0:	b089      	sub	sp, #36	; 0x24
 80044d2:	ed8d 1b00 	vstr	d1, [sp]
 80044d6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80044da:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80044de:	ea58 0102 	orrs.w	r1, r8, r2
 80044e2:	ec57 6b10 	vmov	r6, r7, d0
 80044e6:	d115      	bne.n	8004514 <__ieee754_pow+0x4c>
 80044e8:	19b3      	adds	r3, r6, r6
 80044ea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80044ee:	4152      	adcs	r2, r2
 80044f0:	4299      	cmp	r1, r3
 80044f2:	4b89      	ldr	r3, [pc, #548]	; (8004718 <__ieee754_pow+0x250>)
 80044f4:	4193      	sbcs	r3, r2
 80044f6:	f080 84d2 	bcs.w	8004e9e <__ieee754_pow+0x9d6>
 80044fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044fe:	4630      	mov	r0, r6
 8004500:	4639      	mov	r1, r7
 8004502:	f7fb fe87 	bl	8000214 <__adddf3>
 8004506:	ec41 0b10 	vmov	d0, r0, r1
 800450a:	b009      	add	sp, #36	; 0x24
 800450c:	ecbd 8b06 	vpop	{d8-d10}
 8004510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004514:	4b81      	ldr	r3, [pc, #516]	; (800471c <__ieee754_pow+0x254>)
 8004516:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800451a:	429c      	cmp	r4, r3
 800451c:	ee10 aa10 	vmov	sl, s0
 8004520:	463d      	mov	r5, r7
 8004522:	dc06      	bgt.n	8004532 <__ieee754_pow+0x6a>
 8004524:	d101      	bne.n	800452a <__ieee754_pow+0x62>
 8004526:	2e00      	cmp	r6, #0
 8004528:	d1e7      	bne.n	80044fa <__ieee754_pow+0x32>
 800452a:	4598      	cmp	r8, r3
 800452c:	dc01      	bgt.n	8004532 <__ieee754_pow+0x6a>
 800452e:	d10f      	bne.n	8004550 <__ieee754_pow+0x88>
 8004530:	b172      	cbz	r2, 8004550 <__ieee754_pow+0x88>
 8004532:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004536:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800453a:	ea55 050a 	orrs.w	r5, r5, sl
 800453e:	d1dc      	bne.n	80044fa <__ieee754_pow+0x32>
 8004540:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004544:	18db      	adds	r3, r3, r3
 8004546:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800454a:	4152      	adcs	r2, r2
 800454c:	429d      	cmp	r5, r3
 800454e:	e7d0      	b.n	80044f2 <__ieee754_pow+0x2a>
 8004550:	2d00      	cmp	r5, #0
 8004552:	da3b      	bge.n	80045cc <__ieee754_pow+0x104>
 8004554:	4b72      	ldr	r3, [pc, #456]	; (8004720 <__ieee754_pow+0x258>)
 8004556:	4598      	cmp	r8, r3
 8004558:	dc51      	bgt.n	80045fe <__ieee754_pow+0x136>
 800455a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800455e:	4598      	cmp	r8, r3
 8004560:	f340 84ac 	ble.w	8004ebc <__ieee754_pow+0x9f4>
 8004564:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004568:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800456c:	2b14      	cmp	r3, #20
 800456e:	dd0f      	ble.n	8004590 <__ieee754_pow+0xc8>
 8004570:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004574:	fa22 f103 	lsr.w	r1, r2, r3
 8004578:	fa01 f303 	lsl.w	r3, r1, r3
 800457c:	4293      	cmp	r3, r2
 800457e:	f040 849d 	bne.w	8004ebc <__ieee754_pow+0x9f4>
 8004582:	f001 0101 	and.w	r1, r1, #1
 8004586:	f1c1 0302 	rsb	r3, r1, #2
 800458a:	9304      	str	r3, [sp, #16]
 800458c:	b182      	cbz	r2, 80045b0 <__ieee754_pow+0xe8>
 800458e:	e05f      	b.n	8004650 <__ieee754_pow+0x188>
 8004590:	2a00      	cmp	r2, #0
 8004592:	d15b      	bne.n	800464c <__ieee754_pow+0x184>
 8004594:	f1c3 0314 	rsb	r3, r3, #20
 8004598:	fa48 f103 	asr.w	r1, r8, r3
 800459c:	fa01 f303 	lsl.w	r3, r1, r3
 80045a0:	4543      	cmp	r3, r8
 80045a2:	f040 8488 	bne.w	8004eb6 <__ieee754_pow+0x9ee>
 80045a6:	f001 0101 	and.w	r1, r1, #1
 80045aa:	f1c1 0302 	rsb	r3, r1, #2
 80045ae:	9304      	str	r3, [sp, #16]
 80045b0:	4b5c      	ldr	r3, [pc, #368]	; (8004724 <__ieee754_pow+0x25c>)
 80045b2:	4598      	cmp	r8, r3
 80045b4:	d132      	bne.n	800461c <__ieee754_pow+0x154>
 80045b6:	f1b9 0f00 	cmp.w	r9, #0
 80045ba:	f280 8478 	bge.w	8004eae <__ieee754_pow+0x9e6>
 80045be:	4959      	ldr	r1, [pc, #356]	; (8004724 <__ieee754_pow+0x25c>)
 80045c0:	4632      	mov	r2, r6
 80045c2:	463b      	mov	r3, r7
 80045c4:	2000      	movs	r0, #0
 80045c6:	f7fc f905 	bl	80007d4 <__aeabi_ddiv>
 80045ca:	e79c      	b.n	8004506 <__ieee754_pow+0x3e>
 80045cc:	2300      	movs	r3, #0
 80045ce:	9304      	str	r3, [sp, #16]
 80045d0:	2a00      	cmp	r2, #0
 80045d2:	d13d      	bne.n	8004650 <__ieee754_pow+0x188>
 80045d4:	4b51      	ldr	r3, [pc, #324]	; (800471c <__ieee754_pow+0x254>)
 80045d6:	4598      	cmp	r8, r3
 80045d8:	d1ea      	bne.n	80045b0 <__ieee754_pow+0xe8>
 80045da:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80045de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80045e2:	ea53 030a 	orrs.w	r3, r3, sl
 80045e6:	f000 845a 	beq.w	8004e9e <__ieee754_pow+0x9d6>
 80045ea:	4b4f      	ldr	r3, [pc, #316]	; (8004728 <__ieee754_pow+0x260>)
 80045ec:	429c      	cmp	r4, r3
 80045ee:	dd08      	ble.n	8004602 <__ieee754_pow+0x13a>
 80045f0:	f1b9 0f00 	cmp.w	r9, #0
 80045f4:	f2c0 8457 	blt.w	8004ea6 <__ieee754_pow+0x9de>
 80045f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045fc:	e783      	b.n	8004506 <__ieee754_pow+0x3e>
 80045fe:	2302      	movs	r3, #2
 8004600:	e7e5      	b.n	80045ce <__ieee754_pow+0x106>
 8004602:	f1b9 0f00 	cmp.w	r9, #0
 8004606:	f04f 0000 	mov.w	r0, #0
 800460a:	f04f 0100 	mov.w	r1, #0
 800460e:	f6bf af7a 	bge.w	8004506 <__ieee754_pow+0x3e>
 8004612:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004616:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800461a:	e774      	b.n	8004506 <__ieee754_pow+0x3e>
 800461c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004620:	d106      	bne.n	8004630 <__ieee754_pow+0x168>
 8004622:	4632      	mov	r2, r6
 8004624:	463b      	mov	r3, r7
 8004626:	4630      	mov	r0, r6
 8004628:	4639      	mov	r1, r7
 800462a:	f7fb ffa9 	bl	8000580 <__aeabi_dmul>
 800462e:	e76a      	b.n	8004506 <__ieee754_pow+0x3e>
 8004630:	4b3e      	ldr	r3, [pc, #248]	; (800472c <__ieee754_pow+0x264>)
 8004632:	4599      	cmp	r9, r3
 8004634:	d10c      	bne.n	8004650 <__ieee754_pow+0x188>
 8004636:	2d00      	cmp	r5, #0
 8004638:	db0a      	blt.n	8004650 <__ieee754_pow+0x188>
 800463a:	ec47 6b10 	vmov	d0, r6, r7
 800463e:	b009      	add	sp, #36	; 0x24
 8004640:	ecbd 8b06 	vpop	{d8-d10}
 8004644:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004648:	f000 bc6c 	b.w	8004f24 <__ieee754_sqrt>
 800464c:	2300      	movs	r3, #0
 800464e:	9304      	str	r3, [sp, #16]
 8004650:	ec47 6b10 	vmov	d0, r6, r7
 8004654:	f000 fd48 	bl	80050e8 <fabs>
 8004658:	ec51 0b10 	vmov	r0, r1, d0
 800465c:	f1ba 0f00 	cmp.w	sl, #0
 8004660:	d129      	bne.n	80046b6 <__ieee754_pow+0x1ee>
 8004662:	b124      	cbz	r4, 800466e <__ieee754_pow+0x1a6>
 8004664:	4b2f      	ldr	r3, [pc, #188]	; (8004724 <__ieee754_pow+0x25c>)
 8004666:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800466a:	429a      	cmp	r2, r3
 800466c:	d123      	bne.n	80046b6 <__ieee754_pow+0x1ee>
 800466e:	f1b9 0f00 	cmp.w	r9, #0
 8004672:	da05      	bge.n	8004680 <__ieee754_pow+0x1b8>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	2000      	movs	r0, #0
 800467a:	492a      	ldr	r1, [pc, #168]	; (8004724 <__ieee754_pow+0x25c>)
 800467c:	f7fc f8aa 	bl	80007d4 <__aeabi_ddiv>
 8004680:	2d00      	cmp	r5, #0
 8004682:	f6bf af40 	bge.w	8004506 <__ieee754_pow+0x3e>
 8004686:	9b04      	ldr	r3, [sp, #16]
 8004688:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800468c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004690:	4323      	orrs	r3, r4
 8004692:	d108      	bne.n	80046a6 <__ieee754_pow+0x1de>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4610      	mov	r0, r2
 800469a:	4619      	mov	r1, r3
 800469c:	f7fb fdb8 	bl	8000210 <__aeabi_dsub>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	e78f      	b.n	80045c6 <__ieee754_pow+0xfe>
 80046a6:	9b04      	ldr	r3, [sp, #16]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	f47f af2c 	bne.w	8004506 <__ieee754_pow+0x3e>
 80046ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80046b2:	4619      	mov	r1, r3
 80046b4:	e727      	b.n	8004506 <__ieee754_pow+0x3e>
 80046b6:	0feb      	lsrs	r3, r5, #31
 80046b8:	3b01      	subs	r3, #1
 80046ba:	9306      	str	r3, [sp, #24]
 80046bc:	9a06      	ldr	r2, [sp, #24]
 80046be:	9b04      	ldr	r3, [sp, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	d102      	bne.n	80046ca <__ieee754_pow+0x202>
 80046c4:	4632      	mov	r2, r6
 80046c6:	463b      	mov	r3, r7
 80046c8:	e7e6      	b.n	8004698 <__ieee754_pow+0x1d0>
 80046ca:	4b19      	ldr	r3, [pc, #100]	; (8004730 <__ieee754_pow+0x268>)
 80046cc:	4598      	cmp	r8, r3
 80046ce:	f340 80fb 	ble.w	80048c8 <__ieee754_pow+0x400>
 80046d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80046d6:	4598      	cmp	r8, r3
 80046d8:	4b13      	ldr	r3, [pc, #76]	; (8004728 <__ieee754_pow+0x260>)
 80046da:	dd0c      	ble.n	80046f6 <__ieee754_pow+0x22e>
 80046dc:	429c      	cmp	r4, r3
 80046de:	dc0f      	bgt.n	8004700 <__ieee754_pow+0x238>
 80046e0:	f1b9 0f00 	cmp.w	r9, #0
 80046e4:	da0f      	bge.n	8004706 <__ieee754_pow+0x23e>
 80046e6:	2000      	movs	r0, #0
 80046e8:	b009      	add	sp, #36	; 0x24
 80046ea:	ecbd 8b06 	vpop	{d8-d10}
 80046ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f2:	f000 bcf0 	b.w	80050d6 <__math_oflow>
 80046f6:	429c      	cmp	r4, r3
 80046f8:	dbf2      	blt.n	80046e0 <__ieee754_pow+0x218>
 80046fa:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <__ieee754_pow+0x25c>)
 80046fc:	429c      	cmp	r4, r3
 80046fe:	dd19      	ble.n	8004734 <__ieee754_pow+0x26c>
 8004700:	f1b9 0f00 	cmp.w	r9, #0
 8004704:	dcef      	bgt.n	80046e6 <__ieee754_pow+0x21e>
 8004706:	2000      	movs	r0, #0
 8004708:	b009      	add	sp, #36	; 0x24
 800470a:	ecbd 8b06 	vpop	{d8-d10}
 800470e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004712:	f000 bcd7 	b.w	80050c4 <__math_uflow>
 8004716:	bf00      	nop
 8004718:	fff00000 	.word	0xfff00000
 800471c:	7ff00000 	.word	0x7ff00000
 8004720:	433fffff 	.word	0x433fffff
 8004724:	3ff00000 	.word	0x3ff00000
 8004728:	3fefffff 	.word	0x3fefffff
 800472c:	3fe00000 	.word	0x3fe00000
 8004730:	41e00000 	.word	0x41e00000
 8004734:	4b60      	ldr	r3, [pc, #384]	; (80048b8 <__ieee754_pow+0x3f0>)
 8004736:	2200      	movs	r2, #0
 8004738:	f7fb fd6a 	bl	8000210 <__aeabi_dsub>
 800473c:	a354      	add	r3, pc, #336	; (adr r3, 8004890 <__ieee754_pow+0x3c8>)
 800473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004742:	4604      	mov	r4, r0
 8004744:	460d      	mov	r5, r1
 8004746:	f7fb ff1b 	bl	8000580 <__aeabi_dmul>
 800474a:	a353      	add	r3, pc, #332	; (adr r3, 8004898 <__ieee754_pow+0x3d0>)
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	4606      	mov	r6, r0
 8004752:	460f      	mov	r7, r1
 8004754:	4620      	mov	r0, r4
 8004756:	4629      	mov	r1, r5
 8004758:	f7fb ff12 	bl	8000580 <__aeabi_dmul>
 800475c:	4b57      	ldr	r3, [pc, #348]	; (80048bc <__ieee754_pow+0x3f4>)
 800475e:	4682      	mov	sl, r0
 8004760:	468b      	mov	fp, r1
 8004762:	2200      	movs	r2, #0
 8004764:	4620      	mov	r0, r4
 8004766:	4629      	mov	r1, r5
 8004768:	f7fb ff0a 	bl	8000580 <__aeabi_dmul>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	a14b      	add	r1, pc, #300	; (adr r1, 80048a0 <__ieee754_pow+0x3d8>)
 8004772:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004776:	f7fb fd4b 	bl	8000210 <__aeabi_dsub>
 800477a:	4622      	mov	r2, r4
 800477c:	462b      	mov	r3, r5
 800477e:	f7fb feff 	bl	8000580 <__aeabi_dmul>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	2000      	movs	r0, #0
 8004788:	494d      	ldr	r1, [pc, #308]	; (80048c0 <__ieee754_pow+0x3f8>)
 800478a:	f7fb fd41 	bl	8000210 <__aeabi_dsub>
 800478e:	4622      	mov	r2, r4
 8004790:	4680      	mov	r8, r0
 8004792:	4689      	mov	r9, r1
 8004794:	462b      	mov	r3, r5
 8004796:	4620      	mov	r0, r4
 8004798:	4629      	mov	r1, r5
 800479a:	f7fb fef1 	bl	8000580 <__aeabi_dmul>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4640      	mov	r0, r8
 80047a4:	4649      	mov	r1, r9
 80047a6:	f7fb feeb 	bl	8000580 <__aeabi_dmul>
 80047aa:	a33f      	add	r3, pc, #252	; (adr r3, 80048a8 <__ieee754_pow+0x3e0>)
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f7fb fee6 	bl	8000580 <__aeabi_dmul>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4650      	mov	r0, sl
 80047ba:	4659      	mov	r1, fp
 80047bc:	f7fb fd28 	bl	8000210 <__aeabi_dsub>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4680      	mov	r8, r0
 80047c6:	4689      	mov	r9, r1
 80047c8:	4630      	mov	r0, r6
 80047ca:	4639      	mov	r1, r7
 80047cc:	f7fb fd22 	bl	8000214 <__adddf3>
 80047d0:	2000      	movs	r0, #0
 80047d2:	4632      	mov	r2, r6
 80047d4:	463b      	mov	r3, r7
 80047d6:	4604      	mov	r4, r0
 80047d8:	460d      	mov	r5, r1
 80047da:	f7fb fd19 	bl	8000210 <__aeabi_dsub>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4640      	mov	r0, r8
 80047e4:	4649      	mov	r1, r9
 80047e6:	f7fb fd13 	bl	8000210 <__aeabi_dsub>
 80047ea:	9b04      	ldr	r3, [sp, #16]
 80047ec:	9a06      	ldr	r2, [sp, #24]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	4313      	orrs	r3, r2
 80047f2:	4682      	mov	sl, r0
 80047f4:	468b      	mov	fp, r1
 80047f6:	f040 81e7 	bne.w	8004bc8 <__ieee754_pow+0x700>
 80047fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80048b0 <__ieee754_pow+0x3e8>
 80047fe:	eeb0 8a47 	vmov.f32	s16, s14
 8004802:	eef0 8a67 	vmov.f32	s17, s15
 8004806:	e9dd 6700 	ldrd	r6, r7, [sp]
 800480a:	2600      	movs	r6, #0
 800480c:	4632      	mov	r2, r6
 800480e:	463b      	mov	r3, r7
 8004810:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004814:	f7fb fcfc 	bl	8000210 <__aeabi_dsub>
 8004818:	4622      	mov	r2, r4
 800481a:	462b      	mov	r3, r5
 800481c:	f7fb feb0 	bl	8000580 <__aeabi_dmul>
 8004820:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004824:	4680      	mov	r8, r0
 8004826:	4689      	mov	r9, r1
 8004828:	4650      	mov	r0, sl
 800482a:	4659      	mov	r1, fp
 800482c:	f7fb fea8 	bl	8000580 <__aeabi_dmul>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4640      	mov	r0, r8
 8004836:	4649      	mov	r1, r9
 8004838:	f7fb fcec 	bl	8000214 <__adddf3>
 800483c:	4632      	mov	r2, r6
 800483e:	463b      	mov	r3, r7
 8004840:	4680      	mov	r8, r0
 8004842:	4689      	mov	r9, r1
 8004844:	4620      	mov	r0, r4
 8004846:	4629      	mov	r1, r5
 8004848:	f7fb fe9a 	bl	8000580 <__aeabi_dmul>
 800484c:	460b      	mov	r3, r1
 800484e:	4604      	mov	r4, r0
 8004850:	460d      	mov	r5, r1
 8004852:	4602      	mov	r2, r0
 8004854:	4649      	mov	r1, r9
 8004856:	4640      	mov	r0, r8
 8004858:	f7fb fcdc 	bl	8000214 <__adddf3>
 800485c:	4b19      	ldr	r3, [pc, #100]	; (80048c4 <__ieee754_pow+0x3fc>)
 800485e:	4299      	cmp	r1, r3
 8004860:	ec45 4b19 	vmov	d9, r4, r5
 8004864:	4606      	mov	r6, r0
 8004866:	460f      	mov	r7, r1
 8004868:	468b      	mov	fp, r1
 800486a:	f340 82f1 	ble.w	8004e50 <__ieee754_pow+0x988>
 800486e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004872:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004876:	4303      	orrs	r3, r0
 8004878:	f000 81e4 	beq.w	8004c44 <__ieee754_pow+0x77c>
 800487c:	ec51 0b18 	vmov	r0, r1, d8
 8004880:	2200      	movs	r2, #0
 8004882:	2300      	movs	r3, #0
 8004884:	f7fc f8ee 	bl	8000a64 <__aeabi_dcmplt>
 8004888:	3800      	subs	r0, #0
 800488a:	bf18      	it	ne
 800488c:	2001      	movne	r0, #1
 800488e:	e72b      	b.n	80046e8 <__ieee754_pow+0x220>
 8004890:	60000000 	.word	0x60000000
 8004894:	3ff71547 	.word	0x3ff71547
 8004898:	f85ddf44 	.word	0xf85ddf44
 800489c:	3e54ae0b 	.word	0x3e54ae0b
 80048a0:	55555555 	.word	0x55555555
 80048a4:	3fd55555 	.word	0x3fd55555
 80048a8:	652b82fe 	.word	0x652b82fe
 80048ac:	3ff71547 	.word	0x3ff71547
 80048b0:	00000000 	.word	0x00000000
 80048b4:	bff00000 	.word	0xbff00000
 80048b8:	3ff00000 	.word	0x3ff00000
 80048bc:	3fd00000 	.word	0x3fd00000
 80048c0:	3fe00000 	.word	0x3fe00000
 80048c4:	408fffff 	.word	0x408fffff
 80048c8:	4bd5      	ldr	r3, [pc, #852]	; (8004c20 <__ieee754_pow+0x758>)
 80048ca:	402b      	ands	r3, r5
 80048cc:	2200      	movs	r2, #0
 80048ce:	b92b      	cbnz	r3, 80048dc <__ieee754_pow+0x414>
 80048d0:	4bd4      	ldr	r3, [pc, #848]	; (8004c24 <__ieee754_pow+0x75c>)
 80048d2:	f7fb fe55 	bl	8000580 <__aeabi_dmul>
 80048d6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80048da:	460c      	mov	r4, r1
 80048dc:	1523      	asrs	r3, r4, #20
 80048de:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80048e2:	4413      	add	r3, r2
 80048e4:	9305      	str	r3, [sp, #20]
 80048e6:	4bd0      	ldr	r3, [pc, #832]	; (8004c28 <__ieee754_pow+0x760>)
 80048e8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80048ec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80048f0:	429c      	cmp	r4, r3
 80048f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80048f6:	dd08      	ble.n	800490a <__ieee754_pow+0x442>
 80048f8:	4bcc      	ldr	r3, [pc, #816]	; (8004c2c <__ieee754_pow+0x764>)
 80048fa:	429c      	cmp	r4, r3
 80048fc:	f340 8162 	ble.w	8004bc4 <__ieee754_pow+0x6fc>
 8004900:	9b05      	ldr	r3, [sp, #20]
 8004902:	3301      	adds	r3, #1
 8004904:	9305      	str	r3, [sp, #20]
 8004906:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800490a:	2400      	movs	r4, #0
 800490c:	00e3      	lsls	r3, r4, #3
 800490e:	9307      	str	r3, [sp, #28]
 8004910:	4bc7      	ldr	r3, [pc, #796]	; (8004c30 <__ieee754_pow+0x768>)
 8004912:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004916:	ed93 7b00 	vldr	d7, [r3]
 800491a:	4629      	mov	r1, r5
 800491c:	ec53 2b17 	vmov	r2, r3, d7
 8004920:	eeb0 9a47 	vmov.f32	s18, s14
 8004924:	eef0 9a67 	vmov.f32	s19, s15
 8004928:	4682      	mov	sl, r0
 800492a:	f7fb fc71 	bl	8000210 <__aeabi_dsub>
 800492e:	4652      	mov	r2, sl
 8004930:	4606      	mov	r6, r0
 8004932:	460f      	mov	r7, r1
 8004934:	462b      	mov	r3, r5
 8004936:	ec51 0b19 	vmov	r0, r1, d9
 800493a:	f7fb fc6b 	bl	8000214 <__adddf3>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	2000      	movs	r0, #0
 8004944:	49bb      	ldr	r1, [pc, #748]	; (8004c34 <__ieee754_pow+0x76c>)
 8004946:	f7fb ff45 	bl	80007d4 <__aeabi_ddiv>
 800494a:	ec41 0b1a 	vmov	d10, r0, r1
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4630      	mov	r0, r6
 8004954:	4639      	mov	r1, r7
 8004956:	f7fb fe13 	bl	8000580 <__aeabi_dmul>
 800495a:	2300      	movs	r3, #0
 800495c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004960:	9302      	str	r3, [sp, #8]
 8004962:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004966:	46ab      	mov	fp, r5
 8004968:	106d      	asrs	r5, r5, #1
 800496a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800496e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004972:	ec41 0b18 	vmov	d8, r0, r1
 8004976:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800497a:	2200      	movs	r2, #0
 800497c:	4640      	mov	r0, r8
 800497e:	4649      	mov	r1, r9
 8004980:	4614      	mov	r4, r2
 8004982:	461d      	mov	r5, r3
 8004984:	f7fb fdfc 	bl	8000580 <__aeabi_dmul>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4630      	mov	r0, r6
 800498e:	4639      	mov	r1, r7
 8004990:	f7fb fc3e 	bl	8000210 <__aeabi_dsub>
 8004994:	ec53 2b19 	vmov	r2, r3, d9
 8004998:	4606      	mov	r6, r0
 800499a:	460f      	mov	r7, r1
 800499c:	4620      	mov	r0, r4
 800499e:	4629      	mov	r1, r5
 80049a0:	f7fb fc36 	bl	8000210 <__aeabi_dsub>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4650      	mov	r0, sl
 80049aa:	4659      	mov	r1, fp
 80049ac:	f7fb fc30 	bl	8000210 <__aeabi_dsub>
 80049b0:	4642      	mov	r2, r8
 80049b2:	464b      	mov	r3, r9
 80049b4:	f7fb fde4 	bl	8000580 <__aeabi_dmul>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4630      	mov	r0, r6
 80049be:	4639      	mov	r1, r7
 80049c0:	f7fb fc26 	bl	8000210 <__aeabi_dsub>
 80049c4:	ec53 2b1a 	vmov	r2, r3, d10
 80049c8:	f7fb fdda 	bl	8000580 <__aeabi_dmul>
 80049cc:	ec53 2b18 	vmov	r2, r3, d8
 80049d0:	ec41 0b19 	vmov	d9, r0, r1
 80049d4:	ec51 0b18 	vmov	r0, r1, d8
 80049d8:	f7fb fdd2 	bl	8000580 <__aeabi_dmul>
 80049dc:	a37c      	add	r3, pc, #496	; (adr r3, 8004bd0 <__ieee754_pow+0x708>)
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	4604      	mov	r4, r0
 80049e4:	460d      	mov	r5, r1
 80049e6:	f7fb fdcb 	bl	8000580 <__aeabi_dmul>
 80049ea:	a37b      	add	r3, pc, #492	; (adr r3, 8004bd8 <__ieee754_pow+0x710>)
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f7fb fc10 	bl	8000214 <__adddf3>
 80049f4:	4622      	mov	r2, r4
 80049f6:	462b      	mov	r3, r5
 80049f8:	f7fb fdc2 	bl	8000580 <__aeabi_dmul>
 80049fc:	a378      	add	r3, pc, #480	; (adr r3, 8004be0 <__ieee754_pow+0x718>)
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	f7fb fc07 	bl	8000214 <__adddf3>
 8004a06:	4622      	mov	r2, r4
 8004a08:	462b      	mov	r3, r5
 8004a0a:	f7fb fdb9 	bl	8000580 <__aeabi_dmul>
 8004a0e:	a376      	add	r3, pc, #472	; (adr r3, 8004be8 <__ieee754_pow+0x720>)
 8004a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a14:	f7fb fbfe 	bl	8000214 <__adddf3>
 8004a18:	4622      	mov	r2, r4
 8004a1a:	462b      	mov	r3, r5
 8004a1c:	f7fb fdb0 	bl	8000580 <__aeabi_dmul>
 8004a20:	a373      	add	r3, pc, #460	; (adr r3, 8004bf0 <__ieee754_pow+0x728>)
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	f7fb fbf5 	bl	8000214 <__adddf3>
 8004a2a:	4622      	mov	r2, r4
 8004a2c:	462b      	mov	r3, r5
 8004a2e:	f7fb fda7 	bl	8000580 <__aeabi_dmul>
 8004a32:	a371      	add	r3, pc, #452	; (adr r3, 8004bf8 <__ieee754_pow+0x730>)
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	f7fb fbec 	bl	8000214 <__adddf3>
 8004a3c:	4622      	mov	r2, r4
 8004a3e:	4606      	mov	r6, r0
 8004a40:	460f      	mov	r7, r1
 8004a42:	462b      	mov	r3, r5
 8004a44:	4620      	mov	r0, r4
 8004a46:	4629      	mov	r1, r5
 8004a48:	f7fb fd9a 	bl	8000580 <__aeabi_dmul>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4630      	mov	r0, r6
 8004a52:	4639      	mov	r1, r7
 8004a54:	f7fb fd94 	bl	8000580 <__aeabi_dmul>
 8004a58:	4642      	mov	r2, r8
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	460d      	mov	r5, r1
 8004a5e:	464b      	mov	r3, r9
 8004a60:	ec51 0b18 	vmov	r0, r1, d8
 8004a64:	f7fb fbd6 	bl	8000214 <__adddf3>
 8004a68:	ec53 2b19 	vmov	r2, r3, d9
 8004a6c:	f7fb fd88 	bl	8000580 <__aeabi_dmul>
 8004a70:	4622      	mov	r2, r4
 8004a72:	462b      	mov	r3, r5
 8004a74:	f7fb fbce 	bl	8000214 <__adddf3>
 8004a78:	4642      	mov	r2, r8
 8004a7a:	4682      	mov	sl, r0
 8004a7c:	468b      	mov	fp, r1
 8004a7e:	464b      	mov	r3, r9
 8004a80:	4640      	mov	r0, r8
 8004a82:	4649      	mov	r1, r9
 8004a84:	f7fb fd7c 	bl	8000580 <__aeabi_dmul>
 8004a88:	4b6b      	ldr	r3, [pc, #428]	; (8004c38 <__ieee754_pow+0x770>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	4606      	mov	r6, r0
 8004a8e:	460f      	mov	r7, r1
 8004a90:	f7fb fbc0 	bl	8000214 <__adddf3>
 8004a94:	4652      	mov	r2, sl
 8004a96:	465b      	mov	r3, fp
 8004a98:	f7fb fbbc 	bl	8000214 <__adddf3>
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	460d      	mov	r5, r1
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	f7fb fd69 	bl	8000580 <__aeabi_dmul>
 8004aae:	4b62      	ldr	r3, [pc, #392]	; (8004c38 <__ieee754_pow+0x770>)
 8004ab0:	4680      	mov	r8, r0
 8004ab2:	4689      	mov	r9, r1
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	4629      	mov	r1, r5
 8004aba:	f7fb fba9 	bl	8000210 <__aeabi_dsub>
 8004abe:	4632      	mov	r2, r6
 8004ac0:	463b      	mov	r3, r7
 8004ac2:	f7fb fba5 	bl	8000210 <__aeabi_dsub>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4650      	mov	r0, sl
 8004acc:	4659      	mov	r1, fp
 8004ace:	f7fb fb9f 	bl	8000210 <__aeabi_dsub>
 8004ad2:	ec53 2b18 	vmov	r2, r3, d8
 8004ad6:	f7fb fd53 	bl	8000580 <__aeabi_dmul>
 8004ada:	4622      	mov	r2, r4
 8004adc:	4606      	mov	r6, r0
 8004ade:	460f      	mov	r7, r1
 8004ae0:	462b      	mov	r3, r5
 8004ae2:	ec51 0b19 	vmov	r0, r1, d9
 8004ae6:	f7fb fd4b 	bl	8000580 <__aeabi_dmul>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4630      	mov	r0, r6
 8004af0:	4639      	mov	r1, r7
 8004af2:	f7fb fb8f 	bl	8000214 <__adddf3>
 8004af6:	4606      	mov	r6, r0
 8004af8:	460f      	mov	r7, r1
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4640      	mov	r0, r8
 8004b00:	4649      	mov	r1, r9
 8004b02:	f7fb fb87 	bl	8000214 <__adddf3>
 8004b06:	a33e      	add	r3, pc, #248	; (adr r3, 8004c00 <__ieee754_pow+0x738>)
 8004b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	4604      	mov	r4, r0
 8004b10:	460d      	mov	r5, r1
 8004b12:	f7fb fd35 	bl	8000580 <__aeabi_dmul>
 8004b16:	4642      	mov	r2, r8
 8004b18:	ec41 0b18 	vmov	d8, r0, r1
 8004b1c:	464b      	mov	r3, r9
 8004b1e:	4620      	mov	r0, r4
 8004b20:	4629      	mov	r1, r5
 8004b22:	f7fb fb75 	bl	8000210 <__aeabi_dsub>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	4639      	mov	r1, r7
 8004b2e:	f7fb fb6f 	bl	8000210 <__aeabi_dsub>
 8004b32:	a335      	add	r3, pc, #212	; (adr r3, 8004c08 <__ieee754_pow+0x740>)
 8004b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b38:	f7fb fd22 	bl	8000580 <__aeabi_dmul>
 8004b3c:	a334      	add	r3, pc, #208	; (adr r3, 8004c10 <__ieee754_pow+0x748>)
 8004b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b42:	4606      	mov	r6, r0
 8004b44:	460f      	mov	r7, r1
 8004b46:	4620      	mov	r0, r4
 8004b48:	4629      	mov	r1, r5
 8004b4a:	f7fb fd19 	bl	8000580 <__aeabi_dmul>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4630      	mov	r0, r6
 8004b54:	4639      	mov	r1, r7
 8004b56:	f7fb fb5d 	bl	8000214 <__adddf3>
 8004b5a:	9a07      	ldr	r2, [sp, #28]
 8004b5c:	4b37      	ldr	r3, [pc, #220]	; (8004c3c <__ieee754_pow+0x774>)
 8004b5e:	4413      	add	r3, r2
 8004b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b64:	f7fb fb56 	bl	8000214 <__adddf3>
 8004b68:	4682      	mov	sl, r0
 8004b6a:	9805      	ldr	r0, [sp, #20]
 8004b6c:	468b      	mov	fp, r1
 8004b6e:	f7fb fc9d 	bl	80004ac <__aeabi_i2d>
 8004b72:	9a07      	ldr	r2, [sp, #28]
 8004b74:	4b32      	ldr	r3, [pc, #200]	; (8004c40 <__ieee754_pow+0x778>)
 8004b76:	4413      	add	r3, r2
 8004b78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b7c:	4606      	mov	r6, r0
 8004b7e:	460f      	mov	r7, r1
 8004b80:	4652      	mov	r2, sl
 8004b82:	465b      	mov	r3, fp
 8004b84:	ec51 0b18 	vmov	r0, r1, d8
 8004b88:	f7fb fb44 	bl	8000214 <__adddf3>
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	464b      	mov	r3, r9
 8004b90:	f7fb fb40 	bl	8000214 <__adddf3>
 8004b94:	4632      	mov	r2, r6
 8004b96:	463b      	mov	r3, r7
 8004b98:	f7fb fb3c 	bl	8000214 <__adddf3>
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	4632      	mov	r2, r6
 8004ba0:	463b      	mov	r3, r7
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	460d      	mov	r5, r1
 8004ba6:	f7fb fb33 	bl	8000210 <__aeabi_dsub>
 8004baa:	4642      	mov	r2, r8
 8004bac:	464b      	mov	r3, r9
 8004bae:	f7fb fb2f 	bl	8000210 <__aeabi_dsub>
 8004bb2:	ec53 2b18 	vmov	r2, r3, d8
 8004bb6:	f7fb fb2b 	bl	8000210 <__aeabi_dsub>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4650      	mov	r0, sl
 8004bc0:	4659      	mov	r1, fp
 8004bc2:	e610      	b.n	80047e6 <__ieee754_pow+0x31e>
 8004bc4:	2401      	movs	r4, #1
 8004bc6:	e6a1      	b.n	800490c <__ieee754_pow+0x444>
 8004bc8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004c18 <__ieee754_pow+0x750>
 8004bcc:	e617      	b.n	80047fe <__ieee754_pow+0x336>
 8004bce:	bf00      	nop
 8004bd0:	4a454eef 	.word	0x4a454eef
 8004bd4:	3fca7e28 	.word	0x3fca7e28
 8004bd8:	93c9db65 	.word	0x93c9db65
 8004bdc:	3fcd864a 	.word	0x3fcd864a
 8004be0:	a91d4101 	.word	0xa91d4101
 8004be4:	3fd17460 	.word	0x3fd17460
 8004be8:	518f264d 	.word	0x518f264d
 8004bec:	3fd55555 	.word	0x3fd55555
 8004bf0:	db6fabff 	.word	0xdb6fabff
 8004bf4:	3fdb6db6 	.word	0x3fdb6db6
 8004bf8:	33333303 	.word	0x33333303
 8004bfc:	3fe33333 	.word	0x3fe33333
 8004c00:	e0000000 	.word	0xe0000000
 8004c04:	3feec709 	.word	0x3feec709
 8004c08:	dc3a03fd 	.word	0xdc3a03fd
 8004c0c:	3feec709 	.word	0x3feec709
 8004c10:	145b01f5 	.word	0x145b01f5
 8004c14:	be3e2fe0 	.word	0xbe3e2fe0
 8004c18:	00000000 	.word	0x00000000
 8004c1c:	3ff00000 	.word	0x3ff00000
 8004c20:	7ff00000 	.word	0x7ff00000
 8004c24:	43400000 	.word	0x43400000
 8004c28:	0003988e 	.word	0x0003988e
 8004c2c:	000bb679 	.word	0x000bb679
 8004c30:	08005258 	.word	0x08005258
 8004c34:	3ff00000 	.word	0x3ff00000
 8004c38:	40080000 	.word	0x40080000
 8004c3c:	08005278 	.word	0x08005278
 8004c40:	08005268 	.word	0x08005268
 8004c44:	a3b5      	add	r3, pc, #724	; (adr r3, 8004f1c <__ieee754_pow+0xa54>)
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	4640      	mov	r0, r8
 8004c4c:	4649      	mov	r1, r9
 8004c4e:	f7fb fae1 	bl	8000214 <__adddf3>
 8004c52:	4622      	mov	r2, r4
 8004c54:	ec41 0b1a 	vmov	d10, r0, r1
 8004c58:	462b      	mov	r3, r5
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	4639      	mov	r1, r7
 8004c5e:	f7fb fad7 	bl	8000210 <__aeabi_dsub>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	ec51 0b1a 	vmov	r0, r1, d10
 8004c6a:	f7fb ff19 	bl	8000aa0 <__aeabi_dcmpgt>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	f47f ae04 	bne.w	800487c <__ieee754_pow+0x3b4>
 8004c74:	4aa4      	ldr	r2, [pc, #656]	; (8004f08 <__ieee754_pow+0xa40>)
 8004c76:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	f340 8108 	ble.w	8004e90 <__ieee754_pow+0x9c8>
 8004c80:	151b      	asrs	r3, r3, #20
 8004c82:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004c86:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004c8a:	fa4a f303 	asr.w	r3, sl, r3
 8004c8e:	445b      	add	r3, fp
 8004c90:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004c94:	4e9d      	ldr	r6, [pc, #628]	; (8004f0c <__ieee754_pow+0xa44>)
 8004c96:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004c9a:	4116      	asrs	r6, r2
 8004c9c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	ea23 0106 	bic.w	r1, r3, r6
 8004ca6:	f1c2 0214 	rsb	r2, r2, #20
 8004caa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004cae:	fa4a fa02 	asr.w	sl, sl, r2
 8004cb2:	f1bb 0f00 	cmp.w	fp, #0
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4620      	mov	r0, r4
 8004cbc:	4629      	mov	r1, r5
 8004cbe:	bfb8      	it	lt
 8004cc0:	f1ca 0a00 	rsblt	sl, sl, #0
 8004cc4:	f7fb faa4 	bl	8000210 <__aeabi_dsub>
 8004cc8:	ec41 0b19 	vmov	d9, r0, r1
 8004ccc:	4642      	mov	r2, r8
 8004cce:	464b      	mov	r3, r9
 8004cd0:	ec51 0b19 	vmov	r0, r1, d9
 8004cd4:	f7fb fa9e 	bl	8000214 <__adddf3>
 8004cd8:	a37b      	add	r3, pc, #492	; (adr r3, 8004ec8 <__ieee754_pow+0xa00>)
 8004cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cde:	2000      	movs	r0, #0
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	460d      	mov	r5, r1
 8004ce4:	f7fb fc4c 	bl	8000580 <__aeabi_dmul>
 8004ce8:	ec53 2b19 	vmov	r2, r3, d9
 8004cec:	4606      	mov	r6, r0
 8004cee:	460f      	mov	r7, r1
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	f7fb fa8c 	bl	8000210 <__aeabi_dsub>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4640      	mov	r0, r8
 8004cfe:	4649      	mov	r1, r9
 8004d00:	f7fb fa86 	bl	8000210 <__aeabi_dsub>
 8004d04:	a372      	add	r3, pc, #456	; (adr r3, 8004ed0 <__ieee754_pow+0xa08>)
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	f7fb fc39 	bl	8000580 <__aeabi_dmul>
 8004d0e:	a372      	add	r3, pc, #456	; (adr r3, 8004ed8 <__ieee754_pow+0xa10>)
 8004d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d14:	4680      	mov	r8, r0
 8004d16:	4689      	mov	r9, r1
 8004d18:	4620      	mov	r0, r4
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	f7fb fc30 	bl	8000580 <__aeabi_dmul>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4640      	mov	r0, r8
 8004d26:	4649      	mov	r1, r9
 8004d28:	f7fb fa74 	bl	8000214 <__adddf3>
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	460d      	mov	r5, r1
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4630      	mov	r0, r6
 8004d36:	4639      	mov	r1, r7
 8004d38:	f7fb fa6c 	bl	8000214 <__adddf3>
 8004d3c:	4632      	mov	r2, r6
 8004d3e:	463b      	mov	r3, r7
 8004d40:	4680      	mov	r8, r0
 8004d42:	4689      	mov	r9, r1
 8004d44:	f7fb fa64 	bl	8000210 <__aeabi_dsub>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	4629      	mov	r1, r5
 8004d50:	f7fb fa5e 	bl	8000210 <__aeabi_dsub>
 8004d54:	4642      	mov	r2, r8
 8004d56:	4606      	mov	r6, r0
 8004d58:	460f      	mov	r7, r1
 8004d5a:	464b      	mov	r3, r9
 8004d5c:	4640      	mov	r0, r8
 8004d5e:	4649      	mov	r1, r9
 8004d60:	f7fb fc0e 	bl	8000580 <__aeabi_dmul>
 8004d64:	a35e      	add	r3, pc, #376	; (adr r3, 8004ee0 <__ieee754_pow+0xa18>)
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	460d      	mov	r5, r1
 8004d6e:	f7fb fc07 	bl	8000580 <__aeabi_dmul>
 8004d72:	a35d      	add	r3, pc, #372	; (adr r3, 8004ee8 <__ieee754_pow+0xa20>)
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f7fb fa4a 	bl	8000210 <__aeabi_dsub>
 8004d7c:	4622      	mov	r2, r4
 8004d7e:	462b      	mov	r3, r5
 8004d80:	f7fb fbfe 	bl	8000580 <__aeabi_dmul>
 8004d84:	a35a      	add	r3, pc, #360	; (adr r3, 8004ef0 <__ieee754_pow+0xa28>)
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	f7fb fa43 	bl	8000214 <__adddf3>
 8004d8e:	4622      	mov	r2, r4
 8004d90:	462b      	mov	r3, r5
 8004d92:	f7fb fbf5 	bl	8000580 <__aeabi_dmul>
 8004d96:	a358      	add	r3, pc, #352	; (adr r3, 8004ef8 <__ieee754_pow+0xa30>)
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	f7fb fa38 	bl	8000210 <__aeabi_dsub>
 8004da0:	4622      	mov	r2, r4
 8004da2:	462b      	mov	r3, r5
 8004da4:	f7fb fbec 	bl	8000580 <__aeabi_dmul>
 8004da8:	a355      	add	r3, pc, #340	; (adr r3, 8004f00 <__ieee754_pow+0xa38>)
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	f7fb fa31 	bl	8000214 <__adddf3>
 8004db2:	4622      	mov	r2, r4
 8004db4:	462b      	mov	r3, r5
 8004db6:	f7fb fbe3 	bl	8000580 <__aeabi_dmul>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	f7fb fa25 	bl	8000210 <__aeabi_dsub>
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	460d      	mov	r5, r1
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4640      	mov	r0, r8
 8004dd0:	4649      	mov	r1, r9
 8004dd2:	f7fb fbd5 	bl	8000580 <__aeabi_dmul>
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	ec41 0b19 	vmov	d9, r0, r1
 8004ddc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004de0:	4620      	mov	r0, r4
 8004de2:	4629      	mov	r1, r5
 8004de4:	f7fb fa14 	bl	8000210 <__aeabi_dsub>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	ec51 0b19 	vmov	r0, r1, d9
 8004df0:	f7fb fcf0 	bl	80007d4 <__aeabi_ddiv>
 8004df4:	4632      	mov	r2, r6
 8004df6:	4604      	mov	r4, r0
 8004df8:	460d      	mov	r5, r1
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	4640      	mov	r0, r8
 8004dfe:	4649      	mov	r1, r9
 8004e00:	f7fb fbbe 	bl	8000580 <__aeabi_dmul>
 8004e04:	4632      	mov	r2, r6
 8004e06:	463b      	mov	r3, r7
 8004e08:	f7fb fa04 	bl	8000214 <__adddf3>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4620      	mov	r0, r4
 8004e12:	4629      	mov	r1, r5
 8004e14:	f7fb f9fc 	bl	8000210 <__aeabi_dsub>
 8004e18:	4642      	mov	r2, r8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	f7fb f9f8 	bl	8000210 <__aeabi_dsub>
 8004e20:	460b      	mov	r3, r1
 8004e22:	4602      	mov	r2, r0
 8004e24:	493a      	ldr	r1, [pc, #232]	; (8004f10 <__ieee754_pow+0xa48>)
 8004e26:	2000      	movs	r0, #0
 8004e28:	f7fb f9f2 	bl	8000210 <__aeabi_dsub>
 8004e2c:	ec41 0b10 	vmov	d0, r0, r1
 8004e30:	ee10 3a90 	vmov	r3, s1
 8004e34:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e3c:	da2b      	bge.n	8004e96 <__ieee754_pow+0x9ce>
 8004e3e:	4650      	mov	r0, sl
 8004e40:	f000 f966 	bl	8005110 <scalbn>
 8004e44:	ec51 0b10 	vmov	r0, r1, d0
 8004e48:	ec53 2b18 	vmov	r2, r3, d8
 8004e4c:	f7ff bbed 	b.w	800462a <__ieee754_pow+0x162>
 8004e50:	4b30      	ldr	r3, [pc, #192]	; (8004f14 <__ieee754_pow+0xa4c>)
 8004e52:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004e56:	429e      	cmp	r6, r3
 8004e58:	f77f af0c 	ble.w	8004c74 <__ieee754_pow+0x7ac>
 8004e5c:	4b2e      	ldr	r3, [pc, #184]	; (8004f18 <__ieee754_pow+0xa50>)
 8004e5e:	440b      	add	r3, r1
 8004e60:	4303      	orrs	r3, r0
 8004e62:	d009      	beq.n	8004e78 <__ieee754_pow+0x9b0>
 8004e64:	ec51 0b18 	vmov	r0, r1, d8
 8004e68:	2200      	movs	r2, #0
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f7fb fdfa 	bl	8000a64 <__aeabi_dcmplt>
 8004e70:	3800      	subs	r0, #0
 8004e72:	bf18      	it	ne
 8004e74:	2001      	movne	r0, #1
 8004e76:	e447      	b.n	8004708 <__ieee754_pow+0x240>
 8004e78:	4622      	mov	r2, r4
 8004e7a:	462b      	mov	r3, r5
 8004e7c:	f7fb f9c8 	bl	8000210 <__aeabi_dsub>
 8004e80:	4642      	mov	r2, r8
 8004e82:	464b      	mov	r3, r9
 8004e84:	f7fb fe02 	bl	8000a8c <__aeabi_dcmpge>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	f43f aef3 	beq.w	8004c74 <__ieee754_pow+0x7ac>
 8004e8e:	e7e9      	b.n	8004e64 <__ieee754_pow+0x99c>
 8004e90:	f04f 0a00 	mov.w	sl, #0
 8004e94:	e71a      	b.n	8004ccc <__ieee754_pow+0x804>
 8004e96:	ec51 0b10 	vmov	r0, r1, d0
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	e7d4      	b.n	8004e48 <__ieee754_pow+0x980>
 8004e9e:	491c      	ldr	r1, [pc, #112]	; (8004f10 <__ieee754_pow+0xa48>)
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	f7ff bb30 	b.w	8004506 <__ieee754_pow+0x3e>
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	f7ff bb2c 	b.w	8004506 <__ieee754_pow+0x3e>
 8004eae:	4630      	mov	r0, r6
 8004eb0:	4639      	mov	r1, r7
 8004eb2:	f7ff bb28 	b.w	8004506 <__ieee754_pow+0x3e>
 8004eb6:	9204      	str	r2, [sp, #16]
 8004eb8:	f7ff bb7a 	b.w	80045b0 <__ieee754_pow+0xe8>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f7ff bb64 	b.w	800458a <__ieee754_pow+0xc2>
 8004ec2:	bf00      	nop
 8004ec4:	f3af 8000 	nop.w
 8004ec8:	00000000 	.word	0x00000000
 8004ecc:	3fe62e43 	.word	0x3fe62e43
 8004ed0:	fefa39ef 	.word	0xfefa39ef
 8004ed4:	3fe62e42 	.word	0x3fe62e42
 8004ed8:	0ca86c39 	.word	0x0ca86c39
 8004edc:	be205c61 	.word	0xbe205c61
 8004ee0:	72bea4d0 	.word	0x72bea4d0
 8004ee4:	3e663769 	.word	0x3e663769
 8004ee8:	c5d26bf1 	.word	0xc5d26bf1
 8004eec:	3ebbbd41 	.word	0x3ebbbd41
 8004ef0:	af25de2c 	.word	0xaf25de2c
 8004ef4:	3f11566a 	.word	0x3f11566a
 8004ef8:	16bebd93 	.word	0x16bebd93
 8004efc:	3f66c16c 	.word	0x3f66c16c
 8004f00:	5555553e 	.word	0x5555553e
 8004f04:	3fc55555 	.word	0x3fc55555
 8004f08:	3fe00000 	.word	0x3fe00000
 8004f0c:	000fffff 	.word	0x000fffff
 8004f10:	3ff00000 	.word	0x3ff00000
 8004f14:	4090cbff 	.word	0x4090cbff
 8004f18:	3f6f3400 	.word	0x3f6f3400
 8004f1c:	652b82fe 	.word	0x652b82fe
 8004f20:	3c971547 	.word	0x3c971547

08004f24 <__ieee754_sqrt>:
 8004f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f28:	ec55 4b10 	vmov	r4, r5, d0
 8004f2c:	4e55      	ldr	r6, [pc, #340]	; (8005084 <__ieee754_sqrt+0x160>)
 8004f2e:	43ae      	bics	r6, r5
 8004f30:	ee10 0a10 	vmov	r0, s0
 8004f34:	ee10 3a10 	vmov	r3, s0
 8004f38:	462a      	mov	r2, r5
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	d110      	bne.n	8004f60 <__ieee754_sqrt+0x3c>
 8004f3e:	ee10 2a10 	vmov	r2, s0
 8004f42:	462b      	mov	r3, r5
 8004f44:	f7fb fb1c 	bl	8000580 <__aeabi_dmul>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	4629      	mov	r1, r5
 8004f50:	f7fb f960 	bl	8000214 <__adddf3>
 8004f54:	4604      	mov	r4, r0
 8004f56:	460d      	mov	r5, r1
 8004f58:	ec45 4b10 	vmov	d0, r4, r5
 8004f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f60:	2d00      	cmp	r5, #0
 8004f62:	dc10      	bgt.n	8004f86 <__ieee754_sqrt+0x62>
 8004f64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004f68:	4330      	orrs	r0, r6
 8004f6a:	d0f5      	beq.n	8004f58 <__ieee754_sqrt+0x34>
 8004f6c:	b15d      	cbz	r5, 8004f86 <__ieee754_sqrt+0x62>
 8004f6e:	ee10 2a10 	vmov	r2, s0
 8004f72:	462b      	mov	r3, r5
 8004f74:	ee10 0a10 	vmov	r0, s0
 8004f78:	f7fb f94a 	bl	8000210 <__aeabi_dsub>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	f7fb fc28 	bl	80007d4 <__aeabi_ddiv>
 8004f84:	e7e6      	b.n	8004f54 <__ieee754_sqrt+0x30>
 8004f86:	1512      	asrs	r2, r2, #20
 8004f88:	d074      	beq.n	8005074 <__ieee754_sqrt+0x150>
 8004f8a:	07d4      	lsls	r4, r2, #31
 8004f8c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004f90:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004f94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004f98:	bf5e      	ittt	pl
 8004f9a:	0fda      	lsrpl	r2, r3, #31
 8004f9c:	005b      	lslpl	r3, r3, #1
 8004f9e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004fa2:	2400      	movs	r4, #0
 8004fa4:	0fda      	lsrs	r2, r3, #31
 8004fa6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004faa:	107f      	asrs	r7, r7, #1
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	2516      	movs	r5, #22
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004fb6:	1886      	adds	r6, r0, r2
 8004fb8:	428e      	cmp	r6, r1
 8004fba:	bfde      	ittt	le
 8004fbc:	1b89      	suble	r1, r1, r6
 8004fbe:	18b0      	addle	r0, r6, r2
 8004fc0:	18a4      	addle	r4, r4, r2
 8004fc2:	0049      	lsls	r1, r1, #1
 8004fc4:	3d01      	subs	r5, #1
 8004fc6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004fca:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004fce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004fd2:	d1f0      	bne.n	8004fb6 <__ieee754_sqrt+0x92>
 8004fd4:	462a      	mov	r2, r5
 8004fd6:	f04f 0e20 	mov.w	lr, #32
 8004fda:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004fde:	4281      	cmp	r1, r0
 8004fe0:	eb06 0c05 	add.w	ip, r6, r5
 8004fe4:	dc02      	bgt.n	8004fec <__ieee754_sqrt+0xc8>
 8004fe6:	d113      	bne.n	8005010 <__ieee754_sqrt+0xec>
 8004fe8:	459c      	cmp	ip, r3
 8004fea:	d811      	bhi.n	8005010 <__ieee754_sqrt+0xec>
 8004fec:	f1bc 0f00 	cmp.w	ip, #0
 8004ff0:	eb0c 0506 	add.w	r5, ip, r6
 8004ff4:	da43      	bge.n	800507e <__ieee754_sqrt+0x15a>
 8004ff6:	2d00      	cmp	r5, #0
 8004ff8:	db41      	blt.n	800507e <__ieee754_sqrt+0x15a>
 8004ffa:	f100 0801 	add.w	r8, r0, #1
 8004ffe:	1a09      	subs	r1, r1, r0
 8005000:	459c      	cmp	ip, r3
 8005002:	bf88      	it	hi
 8005004:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005008:	eba3 030c 	sub.w	r3, r3, ip
 800500c:	4432      	add	r2, r6
 800500e:	4640      	mov	r0, r8
 8005010:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005014:	f1be 0e01 	subs.w	lr, lr, #1
 8005018:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800501c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005020:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005024:	d1db      	bne.n	8004fde <__ieee754_sqrt+0xba>
 8005026:	430b      	orrs	r3, r1
 8005028:	d006      	beq.n	8005038 <__ieee754_sqrt+0x114>
 800502a:	1c50      	adds	r0, r2, #1
 800502c:	bf13      	iteet	ne
 800502e:	3201      	addne	r2, #1
 8005030:	3401      	addeq	r4, #1
 8005032:	4672      	moveq	r2, lr
 8005034:	f022 0201 	bicne.w	r2, r2, #1
 8005038:	1063      	asrs	r3, r4, #1
 800503a:	0852      	lsrs	r2, r2, #1
 800503c:	07e1      	lsls	r1, r4, #31
 800503e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005042:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005046:	bf48      	it	mi
 8005048:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800504c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005050:	4614      	mov	r4, r2
 8005052:	e781      	b.n	8004f58 <__ieee754_sqrt+0x34>
 8005054:	0ad9      	lsrs	r1, r3, #11
 8005056:	3815      	subs	r0, #21
 8005058:	055b      	lsls	r3, r3, #21
 800505a:	2900      	cmp	r1, #0
 800505c:	d0fa      	beq.n	8005054 <__ieee754_sqrt+0x130>
 800505e:	02cd      	lsls	r5, r1, #11
 8005060:	d50a      	bpl.n	8005078 <__ieee754_sqrt+0x154>
 8005062:	f1c2 0420 	rsb	r4, r2, #32
 8005066:	fa23 f404 	lsr.w	r4, r3, r4
 800506a:	1e55      	subs	r5, r2, #1
 800506c:	4093      	lsls	r3, r2
 800506e:	4321      	orrs	r1, r4
 8005070:	1b42      	subs	r2, r0, r5
 8005072:	e78a      	b.n	8004f8a <__ieee754_sqrt+0x66>
 8005074:	4610      	mov	r0, r2
 8005076:	e7f0      	b.n	800505a <__ieee754_sqrt+0x136>
 8005078:	0049      	lsls	r1, r1, #1
 800507a:	3201      	adds	r2, #1
 800507c:	e7ef      	b.n	800505e <__ieee754_sqrt+0x13a>
 800507e:	4680      	mov	r8, r0
 8005080:	e7bd      	b.n	8004ffe <__ieee754_sqrt+0xda>
 8005082:	bf00      	nop
 8005084:	7ff00000 	.word	0x7ff00000

08005088 <with_errno>:
 8005088:	b570      	push	{r4, r5, r6, lr}
 800508a:	4604      	mov	r4, r0
 800508c:	460d      	mov	r5, r1
 800508e:	4616      	mov	r6, r2
 8005090:	f7ff f978 	bl	8004384 <__errno>
 8005094:	4629      	mov	r1, r5
 8005096:	6006      	str	r6, [r0, #0]
 8005098:	4620      	mov	r0, r4
 800509a:	bd70      	pop	{r4, r5, r6, pc}

0800509c <xflow>:
 800509c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800509e:	4614      	mov	r4, r2
 80050a0:	461d      	mov	r5, r3
 80050a2:	b108      	cbz	r0, 80050a8 <xflow+0xc>
 80050a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80050a8:	e9cd 2300 	strd	r2, r3, [sp]
 80050ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050b0:	4620      	mov	r0, r4
 80050b2:	4629      	mov	r1, r5
 80050b4:	f7fb fa64 	bl	8000580 <__aeabi_dmul>
 80050b8:	2222      	movs	r2, #34	; 0x22
 80050ba:	b003      	add	sp, #12
 80050bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050c0:	f7ff bfe2 	b.w	8005088 <with_errno>

080050c4 <__math_uflow>:
 80050c4:	b508      	push	{r3, lr}
 80050c6:	2200      	movs	r2, #0
 80050c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80050cc:	f7ff ffe6 	bl	800509c <xflow>
 80050d0:	ec41 0b10 	vmov	d0, r0, r1
 80050d4:	bd08      	pop	{r3, pc}

080050d6 <__math_oflow>:
 80050d6:	b508      	push	{r3, lr}
 80050d8:	2200      	movs	r2, #0
 80050da:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80050de:	f7ff ffdd 	bl	800509c <xflow>
 80050e2:	ec41 0b10 	vmov	d0, r0, r1
 80050e6:	bd08      	pop	{r3, pc}

080050e8 <fabs>:
 80050e8:	ec51 0b10 	vmov	r0, r1, d0
 80050ec:	ee10 2a10 	vmov	r2, s0
 80050f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80050f4:	ec43 2b10 	vmov	d0, r2, r3
 80050f8:	4770      	bx	lr

080050fa <finite>:
 80050fa:	b082      	sub	sp, #8
 80050fc:	ed8d 0b00 	vstr	d0, [sp]
 8005100:	9801      	ldr	r0, [sp, #4]
 8005102:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005106:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800510a:	0fc0      	lsrs	r0, r0, #31
 800510c:	b002      	add	sp, #8
 800510e:	4770      	bx	lr

08005110 <scalbn>:
 8005110:	b570      	push	{r4, r5, r6, lr}
 8005112:	ec55 4b10 	vmov	r4, r5, d0
 8005116:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800511a:	4606      	mov	r6, r0
 800511c:	462b      	mov	r3, r5
 800511e:	b99a      	cbnz	r2, 8005148 <scalbn+0x38>
 8005120:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005124:	4323      	orrs	r3, r4
 8005126:	d036      	beq.n	8005196 <scalbn+0x86>
 8005128:	4b39      	ldr	r3, [pc, #228]	; (8005210 <scalbn+0x100>)
 800512a:	4629      	mov	r1, r5
 800512c:	ee10 0a10 	vmov	r0, s0
 8005130:	2200      	movs	r2, #0
 8005132:	f7fb fa25 	bl	8000580 <__aeabi_dmul>
 8005136:	4b37      	ldr	r3, [pc, #220]	; (8005214 <scalbn+0x104>)
 8005138:	429e      	cmp	r6, r3
 800513a:	4604      	mov	r4, r0
 800513c:	460d      	mov	r5, r1
 800513e:	da10      	bge.n	8005162 <scalbn+0x52>
 8005140:	a32b      	add	r3, pc, #172	; (adr r3, 80051f0 <scalbn+0xe0>)
 8005142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005146:	e03a      	b.n	80051be <scalbn+0xae>
 8005148:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800514c:	428a      	cmp	r2, r1
 800514e:	d10c      	bne.n	800516a <scalbn+0x5a>
 8005150:	ee10 2a10 	vmov	r2, s0
 8005154:	4620      	mov	r0, r4
 8005156:	4629      	mov	r1, r5
 8005158:	f7fb f85c 	bl	8000214 <__adddf3>
 800515c:	4604      	mov	r4, r0
 800515e:	460d      	mov	r5, r1
 8005160:	e019      	b.n	8005196 <scalbn+0x86>
 8005162:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005166:	460b      	mov	r3, r1
 8005168:	3a36      	subs	r2, #54	; 0x36
 800516a:	4432      	add	r2, r6
 800516c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005170:	428a      	cmp	r2, r1
 8005172:	dd08      	ble.n	8005186 <scalbn+0x76>
 8005174:	2d00      	cmp	r5, #0
 8005176:	a120      	add	r1, pc, #128	; (adr r1, 80051f8 <scalbn+0xe8>)
 8005178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800517c:	da1c      	bge.n	80051b8 <scalbn+0xa8>
 800517e:	a120      	add	r1, pc, #128	; (adr r1, 8005200 <scalbn+0xf0>)
 8005180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005184:	e018      	b.n	80051b8 <scalbn+0xa8>
 8005186:	2a00      	cmp	r2, #0
 8005188:	dd08      	ble.n	800519c <scalbn+0x8c>
 800518a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800518e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005192:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005196:	ec45 4b10 	vmov	d0, r4, r5
 800519a:	bd70      	pop	{r4, r5, r6, pc}
 800519c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80051a0:	da19      	bge.n	80051d6 <scalbn+0xc6>
 80051a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80051a6:	429e      	cmp	r6, r3
 80051a8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80051ac:	dd0a      	ble.n	80051c4 <scalbn+0xb4>
 80051ae:	a112      	add	r1, pc, #72	; (adr r1, 80051f8 <scalbn+0xe8>)
 80051b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e2      	bne.n	800517e <scalbn+0x6e>
 80051b8:	a30f      	add	r3, pc, #60	; (adr r3, 80051f8 <scalbn+0xe8>)
 80051ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051be:	f7fb f9df 	bl	8000580 <__aeabi_dmul>
 80051c2:	e7cb      	b.n	800515c <scalbn+0x4c>
 80051c4:	a10a      	add	r1, pc, #40	; (adr r1, 80051f0 <scalbn+0xe0>)
 80051c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0b8      	beq.n	8005140 <scalbn+0x30>
 80051ce:	a10e      	add	r1, pc, #56	; (adr r1, 8005208 <scalbn+0xf8>)
 80051d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051d4:	e7b4      	b.n	8005140 <scalbn+0x30>
 80051d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80051da:	3236      	adds	r2, #54	; 0x36
 80051dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80051e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80051e4:	4620      	mov	r0, r4
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <scalbn+0x108>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	e7e8      	b.n	80051be <scalbn+0xae>
 80051ec:	f3af 8000 	nop.w
 80051f0:	c2f8f359 	.word	0xc2f8f359
 80051f4:	01a56e1f 	.word	0x01a56e1f
 80051f8:	8800759c 	.word	0x8800759c
 80051fc:	7e37e43c 	.word	0x7e37e43c
 8005200:	8800759c 	.word	0x8800759c
 8005204:	fe37e43c 	.word	0xfe37e43c
 8005208:	c2f8f359 	.word	0xc2f8f359
 800520c:	81a56e1f 	.word	0x81a56e1f
 8005210:	43500000 	.word	0x43500000
 8005214:	ffff3cb0 	.word	0xffff3cb0
 8005218:	3c900000 	.word	0x3c900000

0800521c <_init>:
 800521c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521e:	bf00      	nop
 8005220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005222:	bc08      	pop	{r3}
 8005224:	469e      	mov	lr, r3
 8005226:	4770      	bx	lr

08005228 <_fini>:
 8005228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522a:	bf00      	nop
 800522c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522e:	bc08      	pop	{r3}
 8005230:	469e      	mov	lr, r3
 8005232:	4770      	bx	lr
